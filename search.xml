<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>显卡驱动+cuda+cudnn+深度学习框架</title>
      <link href="/2023/03/25/article20230325/"/>
      <url>/2023/03/25/article20230325/</url>
      
        <content type="html"><![CDATA[<h2 id="安装概览"><a href="#安装概览" class="headerlink" title="安装概览"></a>安装概览</h2><p>安装显卡驱动、CUDA 和 cuDNN 可能因操作系统和 GPU 型号而异，下面是一般的步骤：</p><ol><li>下载和安装适合你 GPU 型号的显卡驱动，可以从官方网站或者 GPU 制造商的网站下载。</li><li>下载和安装适合你 CUDA 版本的 CUDA 工具包，可以从官方网站下载。</li><li>下载和安装适合你 CUDA 版本的 cuDNN 库，可以从 NVIDIA Developer 网站下载。</li><li>配置环境变量，以便你的系统能够找到 CUDA 和 cuDNN 的库文件。</li></ol><blockquote><p><strong>注意</strong>：显卡、驱动、CUDA、cuDNN、Python和深度学习环境（TensorFlow等）都要匹配</p><p>尤其是 TensorFlow1.0 和 2.0 的使用对显卡等版本要求严格。</p><p>例如：GTX 1050 + CUDA10.1 + python3.8 + tensorflow2.3.0</p></blockquote><h2 id="1-安装驱动"><a href="#1-安装驱动" class="headerlink" title="1. 安装驱动"></a>1. 安装驱动</h2><p>不同操作系统和显卡型号需要使用不同的命令来安装显卡驱动，下面是几个常见的操作系统的命令：</p><h3 id="1-1-Windows"><a href="#1-1-Windows" class="headerlink" title="1.1 Windows"></a>1.1 Windows</h3><p>在 Windows 系统中，你可以通过<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">官方网站</a>下载适合你显卡型号的驱动程序，然后运行 .exe 文件进行安装。在安装过程中，你可以根据提示选择“自定义安装”选项来选择需要安装的组件。</p><h3 id="1-2-Ubuntu"><a href="#1-2-Ubuntu" class="headerlink" title="1.2 Ubuntu"></a>1.2 Ubuntu</h3><p>在 Ubuntu 中，你可以使用 <code>ubuntu-drivers</code> 命令来自动安装显卡驱动程序。这个命令是 Ubuntu 提供的官方工具，用于识别和安装适用于硬件的推荐和建议驱动程序。</p><p>首先，你需要更新软件包列表和已安装软件包的版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，安装 <code>ubuntu-drivers</code> 命令行工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ubuntu-drivers-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，你可以运行下面的命令来获取可以使用的所有驱动程序的列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ubuntu-drivers list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，你可以使用下面的命令来安装推荐的驱动程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ubuntu-drivers autoinstall<span class="token comment"># 或者</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nvidia-driver-470<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，<code>ubuntu-drivers</code> 命令不会安装 NVIDIA CUDA 和 cuDNN 等其他必需的组件，你需要另外安装它们来进行深度学习开发。</p></blockquote><p>最后输入 <code>nvidia-smi</code> 查看是否安装成功。（所有系统通用命令）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-MacOS"><a href="#1-3-MacOS" class="headerlink" title="1.3 MacOS"></a>1.3 MacOS</h3><p>在 MacOS 系统中，你可以通过以下步骤来安装显卡驱动：</p><ol><li>检查系统中是否安装了其他版本的显卡驱动，可以使用以下命令来查看：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kextstat <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">"nvidia"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果输出了 NVIDIA 的信息，说明系统中已经安装了显卡驱动。</p><ol start="2"><li><p>下载适合你显卡型号和 MacOS 版本的显卡驱动，可以从<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">NVIDIA官方网站</a>下载。</p></li><li><p>双击下载的 .dmg 文件，然后按照提示进行操作，通常会要求你输入管理员密码。</p></li><li><p>安装完成后，重启系统即可。</p></li></ol><h2 id="2-安装cuda"><a href="#2-安装cuda" class="headerlink" title="2. 安装cuda"></a>2. 安装cuda</h2><p>windows 无脑装.exe，同样不要安装驱动，主要介绍 Ubuntu 的安装</p><p>首先在 Nvidia 官网下载适合自己机器的 CUDA 版本，<a href="https://developer.nvidia.com/CUDA-TOOLKIT-ARCHIVE">官网下载</a>，使用 <code>runfile</code> 的方式安装</p><blockquote><p><strong>可以直接将网址复制到浏览器下载，或者命令行 wget 下载</strong></p></blockquote><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205824.png" style="zoom: 67%;"><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303251831277.png" style="zoom: 50%;"><p>接着输入安装命令，按照指示即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sh</span> cuda_*.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果电脑没有安装Nvidia显卡驱动，安装会顺利进行；若已经安装了Nvidia驱动，会提醒移除可以选择Abort退出，之后去删除驱动，也可以直接继续Continue，我选择Continue</p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205277.png" style="zoom: 70%;"><p>选择accpet接受协议</p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205402.png" style="zoom: 75%;"><p>取消勾选第一个driver，直接回车就能取消前面的[X]，然后install</p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205986.png" style="zoom:95%;"><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205544.png"></p><p>根据提示的信息，配置环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> ~/.bashrc   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">export CUDA_HOME=/usr/local/cuda<span class="token punctuation">-</span><span class="token number">11.3</span>export PATH=$CUDA_HOME/bin<span class="token punctuation">:</span>$PATHexport LD_LIBRARY_PATH=/usr/local/cuda<span class="token punctuation">-</span>11.3/lib64$<span class="token punctuation">{</span>LD_LIBRARY_PATH<span class="token punctuation">:</span>+<span class="token punctuation">:</span>$<span class="token punctuation">{</span>LD_LIBRARY_PATH<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后刷新环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试CUDA是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示下图，说明成功</p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205939.png"></p><h2 id="3-安装cuDNN"><a href="#3-安装cuDNN" class="headerlink" title="3. 安装cuDNN"></a>3. 安装cuDNN</h2><p>下载cuDNN ，<a href="https://developer.nvidia.com/rdp/cudnn-download?spm=a2c4e.10696291.0.0.1df819a4HJWSTe">官网</a>（未注册的话，注册一个账号即可）</p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232205561.png"></p><p>解压复制到 cuda 路径下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> cudnn*<span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda/include<span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn* <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装deb</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> libcudnn8_8.0.5.39-1+cuda11.0_amd64.deb<span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> libcudnn8-dev_8.0.5.39-1+cuda11.0_amd64.deb <span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> libcudnn8-samples_8.0.5.39-1+cuda11.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232206714.png"><p>测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/cuda/samples/1_Utilities/deviceQuery <span class="token function">sudo</span> <span class="token function">make</span> ./deviceQuery <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303232206016.png"><p>结果为PASS就成功了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> clean  <span class="token comment">#洁癖患者请清除编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-安装深度学习框架"><a href="#4-安装深度学习框架" class="headerlink" title="4. 安装深度学习框架"></a>4. 安装深度学习框架</h2><ul><li>查看 <code>Pytorch</code> 官网 <a href="https://pytorch.org/">https://pytorch.org/</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 cuda=11.3 专属 pytorch</span>conda <span class="token function">install</span> <span class="token assign-left variable">pytorch</span><span class="token operator">==</span><span class="token number">1.12</span>.1 <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.13</span>.1 <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">0.12</span>.1 <span class="token assign-left variable">cudatoolkit</span><span class="token operator">=</span><span class="token number">11.3</span> <span class="token parameter variable">-c</span> pytorchpip <span class="token function">install</span> <span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">1.12</span>.1+cu113 <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.13</span>.1+cu113 <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">0.12</span>.1 --extra-index-url https://download.pytorch.org/whl/cu113<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看 <code>Tensorflow</code>官网 <a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GPU 版本</span>pip <span class="token function">install</span> tensorflow-gpu<span class="token operator">==</span><span class="token number">2.3</span>.0<span class="token comment"># CPU 版本</span>pip <span class="token function">install</span> <span class="token assign-left variable">tensorflow</span><span class="token operator">==</span><span class="token number">2.3</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word论文排版</title>
      <link href="/2023/03/24/article20230324/"/>
      <url>/2023/03/24/article20230324/</url>
      
        <content type="html"><![CDATA[<h2 id="Word论文排版"><a href="#Word论文排版" class="headerlink" title="Word论文排版"></a>Word论文排版</h2><ol><li><p>页面布局–页面设置，设置页面边距</p></li><li><p>按要求设置正文的文字格式和段落格式</p></li><li><p>设置论文封面</p></li><li><p>设置论文摘要</p></li><li><p>设置一级、二级、三级标题样式，并应用，ctrl+f查看导航标题</p></li><li><p>双击文档页眉处，设置页眉和页脚，插入页码。</p><ul><li>链接到前一节：是否与前一页的页眉页脚一样</li><li>奇偶页不同：关闭链接到前一页（页眉页脚都要设置一次），在奇数页中输入指定页眉页脚。转偶数页，关闭链接到前一页（页眉页脚都要设置一次），在偶数页中输入指定页眉页脚。最后关闭页眉和页脚。</li></ul></li><li><p>引用–创建目录，设置目录文字格式和段落格式，需要设置好标题样式。</p></li><li><p>插入域</p></li><li><p>插入题注，新建标签图，修改编号，图1-1这种随一级标题变化的，需要设置好一级标题样式。设置交叉引用。</p></li><li><p>插入脚注和尾注。</p></li><li><p>参考文献。文献处自定义编号[1]，一条条插入。交叉引用在句号前面。</p></li></ol><h2 id="Word论文审阅"><a href="#Word论文审阅" class="headerlink" title="Word论文审阅"></a>Word论文审阅</h2><ol><li>修订</li><li>批注</li><li>审阅窗格</li><li>比较修订文档和原文档</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作指南</title>
      <link href="/2023/03/23/article20230323/"/>
      <url>/2023/03/23/article20230323/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>参考文献</strong><br><a href="https://docs.github.com/">Github docs</a></p></blockquote><h2 id="Git操作指南"><a href="#Git操作指南" class="headerlink" title="Git操作指南"></a>Git操作指南</h2><blockquote><p><code>Git</code> 是一种分布式版本控制系统，用于跟踪文件的修改历史和协作开发。它可以记录文件的所有修改、修改者、修改时间等信息，并将这些信息存储在一个称为“仓库”（<code>repository</code>）的地方。Git 可以让多个开发者在同一个代码库上协作，同时保持代码的版本控制和完整性。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>安装 <code>Git</code> 通常有几种方法，下面列出了其中的两种常见方法：</p><p>方法一：通过 Git 官方网站下载安装程序进行安装。</p><ol><li>访问 Git 官方网站：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li><li>根据你的操作系统选择下载相应的安装程序。</li><li>下载完成后，运行安装程序，并按照提示进行安装。</li></ol><p>方法二：使用包管理器安装 Git（适用于 Linux 系统）</p><ol><li>在终端中输入以下命令以更新包列表：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装Git：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>等待安装完成后，可以输入以下命令来检查 Git 是否已成功安装：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 Git 已成功安装，会显示 Git 的版本号信息。</p><blockquote><p>无论使用哪种方法安装 Git，安装完成后都可以在终端或命令行中运行 Git 命令。</p></blockquote><ul><li>针对 OS X 的安装。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>针对 Fedora 和使用 yum 的 Linux 发行版的安装。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-更新Git"><a href="#2-更新Git" class="headerlink" title="2. 更新Git"></a>2. 更新Git</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># windows下</span><span class="token function">git</span> update-git-for-windows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-在命令行上访问Git帮助"><a href="#3-在命令行上访问Git帮助" class="headerlink" title="3. 在命令行上访问Git帮助"></a>3. 在命令行上访问Git帮助</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有话题的列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token parameter variable">--all</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 Git 的术语词汇表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> glossary<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-Git的常见命令"><a href="#4-Git的常见命令" class="headerlink" title="4. Git的常见命令"></a>4. Git的常见命令</h3><ul><li><code>git init</code>：将当前目录转换为 Git 仓库。</li><li><code>git clone</code>：将远程仓库克隆到本地。</li><li><code>git add</code>：将文件添加到暂存区。</li><li><code>git commit</code>：将暂存区中的文件提交到本地仓库。</li><li><code>git push</code>：将本地仓库中的文件推送到远程仓库。</li><li><code>git pull</code>：从远程仓库拉取最新的版本并合并到本地仓库。</li><li><code>git branch</code>：查看或创建分支。</li><li><code>git checkout</code>：切换分支或恢复文件到指定版本。</li><li><code>git merge</code>：将两个分支合并。</li><li><code>git status</code>：查看仓库状态，包括未提交的修改和已提交的文件。</li><li><code>git log</code>：查看提交历史。</li></ul><h3 id="5-配置Git"><a href="#5-配置Git" class="headerlink" title="5. 配置Git"></a>5. 配置Git</h3><h4 id="5-1-查看当前所有配置"><a href="#5-1-查看当前所有配置" class="headerlink" title="5.1 查看当前所有配置"></a>5.1 查看当前所有配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将列出你的全局Git配置。如果要查看仓库级别的配置，请在仓库的根目录中运行该命令。</p><blockquote><p><strong>注意</strong>：全局设置储存在 <code>~/.gitconfig</code> 文件中，而本地设置储存在正在工作的仓库中的 <code>.git/config</code> 文件中。</p><p>你可以使用上述命令在任何一个级别中设置或查看配置。</p></blockquote><h4 id="5-2-配置用户信息"><a href="#5-2-配置用户信息" class="headerlink" title="5.2 配置用户信息"></a>5.2 配置用户信息</h4><p>这里设置的 <code>姓名</code> 和 <code>邮箱地址</code> 会用在 Git 的提交日志中，会随着提交日志一同被公开。</p><ul><li>配置你的名字</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">'Your Name'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置你的电子邮件地址</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">'Your email@example.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意</strong>：对于特殊项目设置，用 <code>--local</code> 替换 <code>--global</code>，然后应用配置命令。</p></blockquote><h4 id="5-3-配置编辑器（可选）"><a href="#5-3-配置编辑器（可选）" class="headerlink" title="5.3 配置编辑器（可选）"></a>5.3 配置编辑器（可选）</h4><p>如果你想使用不同于默认编辑器的编辑器，例如 vim ，可以运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor <span class="token string">"vim"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要更改 Windows 的编辑器，则需要加入应用文件的完整路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor <span class="token string">'"C:\Program Files\Vim\gvim.exe" --nofork'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>--nofork</code> 选项告诉Vim在前台打开文件并在文件保存后立即退出，这有助于避免与Git命令之间的交互问题。</p></blockquote><h4 id="5-4-配置命令行颜色（可选）"><a href="#5-4-配置命令行颜色（可选）" class="headerlink" title="5.4 配置命令行颜色（可选）"></a>5.4 配置命令行颜色（可选）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> color.ui <span class="token boolean">true</span>  <span class="token comment"># 在终端中显示彩色的Git输出</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> diff.ui auto   <span class="token comment"># 在显示差异（diff）时使用彩色输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-5-行结束符问题"><a href="#5-5-行结束符问题" class="headerlink" title="5.5 行结束符问题"></a>5.5 行结束符问题</h4><p>如果开发者使用不同的操作系统，可能会导致行结束符问题。不同的操作系统使用不同的行结束符</p><ul><li>Windows 使用 CRLF（回车和换行）</li><li>Unix/Linux 使用 LF（换行）</li></ul><p>为了避免这些问题，你可以使用<code>core.autocrlf</code>配置项将行结束符转换为你喜欢的格式。<code>core.autocrlf</code>有三个可能的值：</p><ul><li><code>input</code>：这是默认值。它告诉 Git 在检出文件时不转换行结束符，但在提交时将行结束符转换为 LF 格式。</li><li><code>true</code>：这告诉 Git 在检出文件时将行结束符转换为 CRLF 格式，在提交时将行结束符转换为 LF 格式。</li><li><code>false</code>：这告诉 Git 不要自动转换行结束符。</li></ul><p>如果你使用的是 Unix/Linux 系统，则建议将 <code>core.autocrlf</code> 设置为 <code>input</code>。如果你使用的是 Windows 系统，则建议将其设置为<code>true</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf input  <span class="token comment"># 这将在检出文件时不转换行结束符，但在提交时将行结束符转换为LF格式。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果你在一个特定的仓库中需要使用不同的行结束符转换规则，你可以在该仓库的根目录中创建一个名为 <code>.gitattributes</code> 的文件，并在其中添加适当的行结束符转换规则。</p></blockquote><p>例如，要将一个仓库中的所有文件转换为 CRLF 格式，可以将以下内容添加到 <code>.gitattributes</code> 文件中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 设置所有文件的默认行为</span><span class="token important">*.text=auto</span><span class="token comment"># 列出应使用系统相关的行结束符的文本文件</span><span class="token important">*.php</span> text<span class="token important">*.html</span> text<span class="token important">*.css</span> text  <span class="token comment"># 列出应使用 CRLF 行结束符且不根据本地操作系统转换的文件 </span><span class="token important">*.sln</span> text eol=crlf  <span class="token comment"># 列出所有不应进行修改的二进制文件 </span><span class="token important">*.png</span> binary  <span class="token important">*.jpg</span> binary  <span class="token important">*.gif</span> binary  <span class="token important">*.ico</span> binary <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-6-Windows中文乱码问题"><a href="#5-6-Windows中文乱码问题" class="headerlink" title="5.6 Windows中文乱码问题"></a>5.6 Windows中文乱码问题</h4><p>在 Windows 中使用 Git 时，中文文件名可能会出现乱码的问题。为了解决这个问题，你可以使用以下命令在全局级别禁用对文件名的引用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-7-设置SSH密钥"><a href="#5-7-设置SSH密钥" class="headerlink" title="5.7 设置SSH密钥"></a>5.7 设置SSH密钥</h4><blockquote><p><code>SSH密钥</code> 是一种用于安全通信的加密密钥，通常用于远程登录和文件传输。在 SSH 协议中，每个用户都会有一对密钥：私钥和公钥。私钥只能由用户拥有，并用于对传输的数据进行加密和签名，而公钥可以向其他人公开，并用于解密和验证数据的来源。</p></blockquote><p>在 Git 中，使用 SSH 密钥是与远程 Git 仓库进行安全通信的一种常见方式。当你与远程 Git 仓库进行通信时，Git 会使用 SSH 协议进行加密通信，从而确保你的数据不会被篡改或窃取。在设置 SSH 密钥时，你将生成一对密钥：私钥和公钥。<strong>私钥存储在本地计算机上，而公钥存储在远程 Git 仓库中</strong>。当你进行与远程 Git 仓库的通信时，Git 会使用私钥对传输的数据进行加密和签名，从而确保数据的安全性。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-t</code> 表示密钥的类型 ，<code>-b</code> 表示密钥的长度，<code>-C</code> 用于识别这个密钥的注释 ，这个注释可以输入任何内容。</p><blockquote><p>生成的SSH密钥将存储在你的计算机的默认 SSH 密钥存储目录中，一般是在 <code>~/.ssh</code> 目录中。</p></blockquote><p><code>ssh-keygen</code> 是一个用于生成 SSH 密钥对的命令行工具，它可以使用多种密钥协议生成密钥对，常见的有以下几种：</p><ul><li><p>RSA（Rivest–Shamir–Adleman）：RSA 是最常用的 SSH 密钥协议之一，它基于一种非对称加密算法，具有较高的安全性和性能。</p></li><li><p>DSA（Digital Signature Algorithm）：DSA 是另一种非对称加密算法，它比 RSA 更快，但通常需要更长的密钥长度才能提供相同的安全性。</p></li><li><p>ECDSA（Elliptic Curve Digital Signature Algorithm）：ECDSA 是基于椭圆曲线加密算法的一种 SSH 密钥协议，相比 RSA 和 DSA，它使用更短的密钥长度提供相同的安全性，因此更适合在资源受限的设备上使用。</p></li><li><p>Ed25519：Ed25519 是一种基于椭圆曲线加密算法的 SSH 密钥协议，它提供与 RSA 相当的安全性，但生成和验证密钥的速度更快。</p></li></ul><p>这些协议在 SSH 密钥对生成时可以通过 ssh-keygen 命令的参数指定，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token comment"># 生成 RSA 密钥对 </span>ssh-keygen <span class="token parameter variable">-t</span> dsa <span class="token comment"># 生成 DSA 密钥对 </span>ssh-keygen <span class="token parameter variable">-t</span> ecdsa <span class="token comment"># 生成 ECDSA 密钥对 </span>ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token comment"># 生成 Ed25519 密钥对</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-8-配置代理（可选）"><a href="#5-8-配置代理（可选）" class="headerlink" title="5.8 配置代理（可选）"></a>5.8 配置代理（可选）</h4><p>本地开启 VPN 代理后，Git 也需要设置代理。否则就会出现能访问 GitHub 网站，但是 git push 超时等情况。</p><ul><li>设置全局 http/https 代理</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 不同代理的端口号不一样</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:7890<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy https://127.0.0.1:7890<span class="token comment"># 或者有时候</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token string">'socks5://127.0.0.1:7890'</span> <span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token string">'socks5://127.0.0.1:7890'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取消全局 http/https 代理（如果不用 VPN，记得取消代理）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>设置 ssh 代理，需要新建并配置一个 <code>config</code>。</p><ul><li><p>linux、MacOS系统：~/.ssh/config</p></li><li><p>Windows系统：C:/Users/用户名/.ssh/config</p></li></ul></li></ul><blockquote><p>在SSH连接时，这个配置文件通常被用来设置主机别名、指定用户和身份验证方法等。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">Host example.com  <span class="token comment"># 主机别名</span>  HostName example.com <span class="token comment"># 主机名</span>  User username        <span class="token comment"># 用户名</span>  IdentityFile ~/.ssh/id_rsa <span class="token comment"># 身份验证方法</span>  Host github.com  HostName github.com   User git   IdentityFile ~/.ssh/github_rsa Host gitee.com  HostName gitee.com   User git   IdentityFile ~/.ssh/gitee_rsa <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个详细的基于自己的代理案例</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Windows，注意替换端口号和 git\mingw64\bin\connect.exe 的路径</span>ProxyCommand "D<span class="token punctuation">:</span>\Program Files\Git\mingw64\bin\connect" <span class="token punctuation">-</span>S 127.0.0.1<span class="token punctuation">:</span>7890 <span class="token punctuation">-</span>a none %h %p<span class="token comment"># MacOS，注意替换端口号</span>ProxyCommand /usr/bin/nc <span class="token punctuation">-</span>v <span class="token punctuation">-</span>x 127.0.0.1<span class="token punctuation">:</span>7890 %h %p<span class="token comment"># 备用主机名</span>Host github.com  Hostname ssh.github.com  User git  Port 443  TCPKeepAlive yes  IdentityFile "C<span class="token punctuation">:</span>\Users\用户名\.ssh\id_rsa"<span class="token comment"># 备用主机名</span>Host gitlab.com  Hostname altssh.gitlab.com  User git  Port 443  PreferredAuthentications publickey  IdentityFile "C<span class="token punctuation">:</span>\Users\用户名\.ssh\id_rsa"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，如果使用 HTTPS 协议可能更加稳定，可以尝试使用HTTPS 协议进行连接。</p><p>ssh.github.com 是 Github 的 SSH 代理服务器地址。当你在使用 Git 命令或者其他 Git 工具时，如果直接连接 Github 的 SSH 服务github.com，可能会因为网络限制或其他原因导致连接失败。为了解决这个问题，Github 提供了一个 SSH 代理服务器ssh.github.com，可以通过这个代理服务器来连接 Github 的 SSH 服务。</p></blockquote><p>保存后 <code>config</code> 文件后测试方法如下，返回 successful 或者 welcome 之类的就成功了。(需要保证已经讲SSH公钥添加到托管平台)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试是否设置成功</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitlab.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Git托管平台-基于GitHub"><a href="#Git托管平台-基于GitHub" class="headerlink" title="Git托管平台(基于GitHub)"></a>Git托管平台(基于GitHub)</h2><p>三个流行的协作平台：<code>GitHub</code>、<code>Bitbucket</code> 和 <code>GitLab</code>。在 GitHub 上托管开源项目，在 Bitbucket 上托管私有客户工作，以及 GitLab 上的内部自治项目。</p><h3 id="1-创建账号"><a href="#1-创建账号" class="headerlink" title="1. 创建账号"></a>1. 创建账号</h3><h4 id="1-1-创建账号"><a href="#1-1-创建账号" class="headerlink" title="1.1 创建账号"></a>1.1 创建账号</h4><ol><li><p>访问 <a href="https://github.com./">https://github.com</a></p></li><li><p>输入一个未被占用的用户名。GitHub 会告诉你这个名称是否已经被使用。</p></li><li><p>输入一个合法的电子邮件地址。</p></li><li><p>输入一个安全的密码。</p></li><li><p>点击 <code>Sign up for GitHub</code>（注册 GitHub 账户）按钮继续。</p></li></ol><h4 id="1-2-选择付费方案"><a href="#1-2-选择付费方案" class="headerlink" title="1.2 选择付费方案"></a>1.2 选择付费方案</h4><ol><li><p>确认你希望启用的方案类型。默认情况下，免费方案是被选中的。</p></li><li><p>通过点击 <code>Finish sign up</code>（完成注册）完成账户创建过程。</p></li></ol><h4 id="1-3-设置SSH"><a href="#1-3-设置SSH" class="headerlink" title="1.3 设置SSH"></a>1.3 设置SSH</h4><ol><li><p>访问 <a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a></p></li><li><p>在 <code>SSH Keys</code> 摘要页面，点击 <code>Add SSH key</code>（添加 SSH 密钥）。</p></li><li><p>可选择是否为你的 SSH 密钥添加一个标题。</p></li><li><p>将你之前复制的公钥粘贴到 Key（密钥）字段中。</p></li><li><p>点击 <code>Add key</code>（添加密钥）按钮。</p></li></ol><h3 id="2-创建组织"><a href="#2-创建组织" class="headerlink" title="2. 创建组织"></a>2. 创建组织</h3><h4 id="2-1-创建组织"><a href="#2-1-创建组织" class="headerlink" title="2.1 创建组织"></a>2.1 创建组织</h4><ol><li><p>从顶部的菜单中，点击头像左边的 + 符号。</p></li><li><p>点击 <code>New Organization</code>（新建项目）。你将会被重新定向到新组织的设置表单。</p></li><li><p>在 <code>Create an organization</code>（创建新组织）的表单中，输入以下信息。</p><ul><li>Organization Name（组织名）：这将会是你项目 URL 的一部分。</li><li>Billing email（账单寄送电子邮件地址）：即使你选择免费方案，这个字段也是必填的。</li><li>Plan（方案）：默认选择开源。</li></ul></li><li><p>点击 <code>Create organization</code>（创建组织）以继续。</p></li></ol><h4 id="2-2-邀请成员"><a href="#2-2-邀请成员" class="headerlink" title="2.2 邀请成员"></a>2.2 邀请成员</h4><ol><li><p>在搜索框中，输入你想要添加的成员的名字或用户名。</p></li><li><p>点击成员名字右边的 + 符号。</p></li><li><p>重复第 (1) 步和第 (2) 步，添加所有成员。</p></li><li><p>点击 <code>Finish</code>（完成）来发送邀请。</p></li></ol><h2 id="基于issue的工作流程"><a href="#基于issue的工作流程" class="headerlink" title="基于issue的工作流程"></a>基于issue的工作流程</h2><h3 id="1-基本步骤"><a href="#1-基本步骤" class="headerlink" title="1. 基本步骤"></a>1. 基本步骤</h3><p>GitHub 的 <code>issue</code> 是一种让用户和团队成员之间协作交流的方式，可以用来报告 bug、提出功能请求、讨论设计问题、寻求帮助等。下面是一个基本的 GitHub issue 流程：</p><ol><li><p>打开项目页面，点击<code>Issues</code>选项卡。</p></li><li><p>点击<code>New issue</code>按钮，创建一个新的 issue。</p></li><li><p>在标题栏中简要概括问题，然后在正文中详细描述问题。</p></li><li><p>如果有必要，可以使用标签、里程碑和分配器等功能来进一步组织和跟踪问题。</p></li><li><p>在本地仓库中，使用 issue+number 格式创建一个新的分支。</p></li><li><p>完成工单描述的工作（且只完成工单中描述的工作）。</p></li><li><p>测试工作，确保已经完成并且是正确的。确保它能够通过开发环境下的 QA 测试。</p></li><li><p>将更改添加到本地仓库的暂存区。</p></li><li><p>将缓存的修改提交至仓库。</p></li><li><p>将更改推送到备用服务器上，如 GitLab、Bitbucket 或 GitHub。根据工单系统，可以将这个工单标记为已解决， 但不需要将其标记为已关闭。</p></li><li><p>当对工作完全满意时，将工单分支并入主分支（通常是 main）并将修改后的分支推送到代码托管系统中。</p></li><li><p>再一次测试工作，确保没有后续问题。</p></li><li><p>将工单标记为已关闭。</p></li></ol><p>通过正确使用 GitHub issue，可以帮助您的团队更好地管理项目和交流，并使项目更加高效和有组织。在实际使用中，还可以根据实际情况进行微调或扩展。例如，可以添加一个 <code>Code Review</code> 步骤，让团队成员对代码进行评审，以确保代码质量和合规性。还可以使用 <code>Git Hooks</code> 等工具来自动化某些流程，例如自动化测试和代码风格检查。</p><h3 id="2-创建issue模板"><a href="#2-创建issue模板" class="headerlink" title="2. 创建issue模板"></a>2. 创建issue模板</h3><p>在 GitHub 上创建 issue 模板，可以让贡献者更好地理解问题的需求，并更容易地与问题描述对齐。以下是如何创建一个 issue 模板的步骤：</p><ol><li>打开你的 GitHub 仓库，并点击 <code>Settings</code> 选项卡。</li><li>在 <code>Features</code>，你会看到 <code>Set up templates</code> 按钮，点击它。</li><li>点击 <code>Add template</code> 按钮。</li><li>给你的模板命名，并填写模板的正文，使其包含你想要贡献者填写的问题信息。</li><li>保存模板，并确保它已被正确添加到你的仓库中。</li></ol><blockquote><p>会在仓库的.github/ISSUE_TEMPLATE下生成模板</p></blockquote><ul><li><strong>Bug Report模板</strong></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">提交 issue 前，请先确认：</span><span class="token punctuation">**</span></span><span class="token list punctuation">-</span> [x] 我已看过 <span class="token bold"><span class="token punctuation">**</span><span class="token content">README</span><span class="token punctuation">**</span></span>，此问题不在列表中<span class="token list punctuation">-</span> [ ] 我已看过其他 issue，他们不能解决我的问题 <span class="token bold"><span class="token punctuation">**</span><span class="token content">表现</span><span class="token punctuation">**</span></span>  清晰准确的描述 BUG 的表现情况<span class="token bold"><span class="token punctuation">**</span><span class="token content">运行环境:</span><span class="token punctuation">**</span></span>  <span class="token list punctuation">-</span> 操作系统：？<span class="token list punctuation">-</span> Docker： ？<span class="token list punctuation">-</span> 项目版本：？<span class="token bold"><span class="token punctuation">**</span><span class="token content">复现步骤</span><span class="token punctuation">**</span></span>  描述你是如何触发这个 BUG 的<span class="token list punctuation">1.</span> Go to '...'<span class="token list punctuation">2.</span> Click on '....'<span class="token list punctuation">3.</span> Scroll down to '....'<span class="token list punctuation">4.</span> See error<span class="token bold"><span class="token punctuation">**</span><span class="token content">预期行为</span><span class="token punctuation">**</span></span>  描述你认为正常情况下应该看见的情况<span class="token bold"><span class="token punctuation">**</span><span class="token content">截图</span><span class="token punctuation">**</span></span>  相关日志、聊天记录的截图，没有可跳过<span class="token bold"><span class="token punctuation">**</span><span class="token content">其他内容</span><span class="token punctuation">**</span></span>  此处填写其他内容，没有可跳过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Feature request模板</strong></li></ul><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">您的功能请求是否与问题有关？请描述。对问题的清晰而简明的描述。例如，当...时，我总是感到沮丧。描述您想要的解决方案。对您希望发生的事情进行清晰而简洁的描述。描述您已考虑过的替代方案。对您已考虑过的任何替代解决方案或功能进行清晰而简洁的描述。附加上下文。在此处添加有关功能请求的任何其他上下文或屏幕截图。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于Project的工作流程"><a href="#基于Project的工作流程" class="headerlink" title="基于Project的工作流程"></a>基于Project的工作流程</h2><p>GitHub 的 <code>Project</code> 是一种协作工具，可以帮助团队组织任务和跟踪进度。下面是使用 GitHub Project 的基本步骤：</p><ol><li>创建项目：在你的 GitHub 仓库中创建一个项目。</li><li>添加列：为你的项目添加不同的列，例如“待办事项”、“进行中”和“已完成”。</li><li>创建卡片：为每个任务创建一张卡片，并将其添加到适当的列中。卡片可以包含有关任务的详细信息和描述，可以分配给不同的人员，并附有标签和里程碑等元数据。</li><li>移动卡片：当任务的状态发生变化时，将卡片移动到正确的列中。</li><li>跟踪进度：通过检查卡片的状态和列中的任务数量，跟踪项目的进度和状态。</li><li>协作：团队成员可以协作在卡片上，评论和讨论任务，提出问题和建议等。</li></ol><p>GitHub Project 有许多高级功能，例如自动化、过滤器、排序和时间跟踪等，可以根据需要进行配置。</p><h2 id="Wiki——项目使用指南"><a href="#Wiki——项目使用指南" class="headerlink" title="Wiki——项目使用指南"></a>Wiki——项目使用指南</h2><p>GitHub 的 <code>Wiki</code> 是一个用于存储和共享文档的功能，可以用于记录项目相关的文档、知识点、指南等。下面是使用 GitHub 的 wiki 的步骤：</p><ol><li>在你的 GitHub 项目主页上点击<code>Wiki</code> 标签。</li><li>如果你还没有启用 wiki，点击 <code>Create the first page</code> 开始创建第一页，然后输入页面标题和内容并提交。</li><li>如果你已经有了 wiki 页面，点击 <code>Create new page</code> 或 <code>Edit</code> 来创建或编辑页面。你可以使用 Markdown 语法来编写页面，GitHub 会自动将其转换为 HTML 格式。</li><li>如果你需要添加图片或其他文件，可以先将它们上传到你的项目的仓库中，然后在 wiki 页面中使用相应的链接来引用它们。</li><li>你还可以使用 GitHub 的协作功能来邀请其他人参与编辑和管理 wiki 页面。在页面右侧的 <code>Settings</code> 中，你可以选择允许哪些人对 wiki 页面进行编辑和管理。</li><li>如果你需要查找和浏览 wiki 页面，可以使用 GitHub 的搜索功能，在项目主页的搜索框中输入关键词即可找到相关的页面。</li></ol><p>总的来说，使用 GitHub 的 wiki 可以方便地记录和共享项目相关的文档和知识，提高团队协作效率。</p><h2 id="常用的项目操作"><a href="#常用的项目操作" class="headerlink" title="常用的项目操作"></a>常用的项目操作</h2><h3 id="1-创建本地仓库"><a href="#1-创建本地仓库" class="headerlink" title="1. 创建本地仓库"></a>1. 创建本地仓库</h3><p><strong>第一种情况：克隆已有的仓库项目</strong></p><p>创建项目克隆将会下载仓库中所有文件的副本及其提交历史，它还会记住你下载代码的地方，将远程代码托管服务器设置为跟踪仓库。直接下载压缩包解压则没有这个功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone 链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第二种情况：初始化已有的本地项目</strong></p><ul><li>初始化目录：直接下载压缩包解压，git自动感知目录下的所有文件，包括子目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查仓库的当前状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将仓库中所有文件添加至暂存区</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--all</span>或者<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>将当前暂存区中的文件保存到仓库的历史记录中</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> HEAD              <span class="token comment"># 查看更改前后的差别</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"文本"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第三种情况：初始化空项目</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个文件夹，用于存放项目，无论在任何地方git都不关心</span><span class="token comment"># 在创建好的新文件夹下初始化</span><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看历史记录"><a href="#2-查看历史记录" class="headerlink" title="2. 查看历史记录"></a>2. 查看历史记录</h3><p>查看本地仓库当前签出分支中的每个提交的提交消息和作者信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log                <span class="token comment"># 能查看以当前状态为终点的历史日志，按q退出</span><span class="token function">git</span> log <span class="token parameter variable">--oneline</span>      <span class="token comment"># 每个日志只显示一行</span><span class="token function">git</span> log <span class="token parameter variable">-10</span>            <span class="token comment"># 显示最近的10个log</span><span class="token function">git</span> log 文件或者日志名    <span class="token comment"># 指定查看日志 </span><span class="token function">git</span> log <span class="token parameter variable">-p</span>             <span class="token comment"># 显示出具体改动</span><span class="token function">git</span> reflog             <span class="token comment"># 查看当前仓库的操作日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-分支的操作"><a href="#3-分支的操作" class="headerlink" title="3. 分支的操作"></a>3. 分支的操作</h3><p>分支在 Git 中非常重要，它允许你在同一个仓库中同时进行多个不同的工作流程，同时分支分为<code>本地分支</code>和<code>远程分支</code>，使用时候要分清楚。通常，在开始新的功能开发之前，你应该从主分支（如 <code>main</code> 分支）创建一个新的分支，例如 <code>feature-branch</code>。在这个分支上进行开发，直到功能开发完毕并经过了测试，然后将分支合并回主分支。以下是一些常见的分支操作：</p><h4 id="3-1-列出分支"><a href="#3-1-列出分支" class="headerlink" title="3.1 列出分支"></a>3.1 列出分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出本地所有分支</span><span class="token function">git</span> branch <span class="token parameter variable">--list</span><span class="token comment"># 列出所有分支</span><span class="token function">git</span> branch <span class="token parameter variable">--all</span><span class="token comment"># 或者</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span><span class="token comment"># 列出远程分支</span><span class="token function">git</span> branch <span class="token parameter variable">--remotes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-更新拉取远程分支列表"><a href="#3-2-更新拉取远程分支列表" class="headerlink" title="3.2 更新拉取远程分支列表"></a>3.2 更新拉取远程分支列表</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-切换使用不同的分支"><a href="#3-3-切换使用不同的分支" class="headerlink" title="3.3. 切换使用不同的分支"></a>3.3. 切换使用不同的分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">--track</span> 分支名称            <span class="token comment"># 在本地创建并切换到一个新的分支，该分支会跟踪远程仓库的同名分支</span>    <span class="token comment"># 如果本地没有对应的远程分支，可以先使用 git fetch 命令获取远程分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 子分支名称 父分支名称      <span class="token comment"># 在本地创建、切换分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-4-创建新的分支"><a href="#3-4-创建新的分支" class="headerlink" title="3.4. 创建新的分支"></a>3.4. 创建新的分支</h4><p>分支名应该能够反映正在进行的工作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到一个父节点</span><span class="token function">git</span> checkout main<span class="token comment"># 在本地创建分支节点</span><span class="token function">git</span> branch 子分支名称<span class="token comment"># 签出到分支节点</span><span class="token function">git</span> checkout 子分支名称<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 子分支名称 main   <span class="token comment"># 在本地创建、切换分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-合并分支"><a href="#3-5-合并分支" class="headerlink" title="3.5. 合并分支"></a>3.5. 合并分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将工单分支并入你的主分支</span><span class="token function">git</span> checkout main<span class="token function">git</span> merge --no-ff 工单分支名称          <span class="token comment"># --no-ff 为了记录合并历史，强制 Git 生成一个新的提交记录</span><span class="token function">git</span> push --set-upstream 远程仓库名<span class="token punctuation">(</span>默认是origin<span class="token punctuation">)</span> 分支名称   <span class="token comment"># 将本地分支推送到远程仓库并在远程仓库中创建与本地分支同名的分支</span><span class="token function">git</span> push --set-upstream origin main <span class="token comment"># 将本地 main 分支推送到远程仓库 origin 并在 origin 上创建名为 main 的分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-删除分支"><a href="#3-6-删除分支" class="headerlink" title="3.6. 删除分支"></a>3.6. 删除分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除这个分支的本地副本</span><span class="token function">git</span> branch <span class="token parameter variable">--delete</span> 工单分支名称<span class="token comment"># 或者</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> 工单分支名称<span class="token comment"># 删除不再需要的远程分支</span><span class="token function">git</span> push <span class="token parameter variable">--delete</span> 远程仓库名<span class="token punctuation">(</span>默认是origin<span class="token punctuation">)</span> 工单分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果分支还没有被合并，将无法删除它。如果你想强制删除一个尚未合并的分支，可以使用 <code>git branch -D &lt;branch-name&gt;</code> 命令</p></blockquote><h4 id="3-7-查看分支结构"><a href="#3-7-查看分支结构" class="headerlink" title="3.7. 查看分支结构"></a>3.7. 查看分支结构</h4><ul><li><code>--all</code>: 显示所有分支的提交历史。</li><li><code>--abbrev-commit</code>: 仅显示 SHA-1 的前几个字符而不是完整的 SHA-1 值。</li><li><code>--decorate</code>: 显示每个提交所在的分支和标签。</li><li><code>--date=iso</code>: 显示提交日期的 ISO 格式。</li><li><code>--pretty=format:'%h %Cgreen%ar %Creset%an %s'</code>: 指定提交历史的输出格式，这里是显示简写的 SHA-1 值、提交相对时间、作者名和提交信息。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--graph</span><span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--all</span> --abbrev-commit <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--date</span><span class="token operator">=</span>iso <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">'%h %Cgreen%ar %Creset%an %s'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-在仓库中添加更改"><a href="#4-在仓库中添加更改" class="headerlink" title="4. 在仓库中添加更改"></a>4. 在仓库中添加更改</h3><p>Git中的更改必须先进行暂存，进入缓存区，然后再保存至仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将选中的已更改文件添加至Git仓库</span><span class="token function">git</span> <span class="token function">add</span> 文件1 文件2 <span class="token punctuation">..</span>.<span class="token comment"># 递归地添加指定路径中的所有文件</span><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>directory_name<span class="token operator">&gt;</span>/*<span class="token comment"># 添加扩展名为.png的所有文件</span><span class="token function">git</span> <span class="token function">add</span> *.png<span class="token comment"># 暂存Git中所有已知的且在上次提交之后编辑过（或修改过）的文件</span><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--update</span><span class="token comment"># 暂存Git中所有已知但还没有进行暂存的文件；暂存任何当前未被Git跟踪的文件</span><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在仓库中添加部分文件修改</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将选中的修改交互式地添加到缓存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">--patch</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>提交部分更改</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将选中的修改交互式地添加到你的Git仓库</span><span class="token function">git</span> commit <span class="token parameter variable">--patch</span> <span class="token parameter variable">-m</span> <span class="token string">'message'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>从暂存区撤回文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编写扩展提交消息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对上一条提交的commit修改</span><span class="token function">git</span> commit <span class="token parameter variable">--amend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-连接远程仓库（在上传前要完成连接）"><a href="#5-连接远程仓库（在上传前要完成连接）" class="headerlink" title="5. 连接远程仓库（在上传前要完成连接）"></a>5. 连接远程仓库（在上传前要完成连接）</h3><h4 id="5-1-添加远程连接"><a href="#5-1-添加远程连接" class="headerlink" title="5.1 添加远程连接"></a>5.1 添加远程连接</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用自定义的名称在本地仓库中添加远程连接，一般用origin</span><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> git@github.com:用户名/仓库名.git<span class="token comment"># 例如</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/user/repo.git<span class="token comment"># 两个远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> my_github git@github.com:用户名/仓库名.git<span class="token function">git</span> remote <span class="token function">add</span> my_gitlab git@gitlab.com:用户名/仓库名.git<span class="token comment"># 从本地 Git 仓库中删除远程仓库</span><span class="token function">git</span> remote remove <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token comment"># 列出连接至你当前仓库的远程仓库</span><span class="token function">git</span> remote <span class="token parameter variable">--verbose</span><span class="token comment"># 或者</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-查看特定远程仓库的详细信息"><a href="#5-2-查看特定远程仓库的详细信息" class="headerlink" title="5.2 查看特定远程仓库的详细信息"></a>5.2 查看特定远程仓库的详细信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote show <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-3-重命名远程仓库"><a href="#5-3-重命名远程仓库" class="headerlink" title="5.3 重命名远程仓库"></a>5.3 重命名远程仓库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>old-name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>new-name<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-4-将远程分支合并到本地分支"><a href="#5-4-将远程分支合并到本地分支" class="headerlink" title="5.4 将远程分支合并到本地分支"></a>5.4 将远程分支合并到本地分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature origin/feature <span class="token comment"># 从远程分支创建本地分支并检出它</span><span class="token function">git</span> pull origin main  <span class="token comment"># 将远程仓库origin上main分支上的更新拉取到本地仓库的main分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>git pull = git fetch + git merge</p><p><code>git fetch</code> 命令用于将远程仓库的更新拉取到本地</p><p><code>git merge</code> 命令用于将本地仓库的分支与远程仓库合并</p></blockquote><h4 id="5-5-推送本地分支到远程分支"><a href="#5-5-推送本地分支到远程分支" class="headerlink" title="5.5 推送本地分支到远程分支"></a>5.5 推送本地分支到远程分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push<span class="token comment"># 在上传本地分支时设置上游分支</span><span class="token function">git</span> push --set-upstream 上游分支<span class="token punctuation">(</span>默认origin<span class="token punctuation">)</span> 当前分支<span class="token comment"># 简化</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>推送到远程分支之前，需要先用 <code>git pull</code> 将本地分支与远程分支进行合并，或者使用 <code>git push --force</code> 命令强制推送</p></blockquote><h3 id="6-回滚"><a href="#6-回滚" class="headerlink" title="6. 回滚"></a>6. 回滚</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>Reset</td><td>用于将分支顶端移至一个之前的提交。重置命令可以在本地仓库中删除提交历史记录，但要注意，一旦从远程仓库中克隆的副本也将被更新。使用 <code>git reset</code> 命令时需要非常小心，因为它可以永久性地删除提交。</td></tr><tr><td>Rebase</td><td>允许您改变分支历史记录中提交的存放方式。在 <code>rebase</code> 期间，将基于另一个分支来更改提交，通常用于将多个提交压缩成一个提交。这个命令可以用来减少分支的历史记录并简化分支树，但在处理公共分支时需要谨慎。</td></tr><tr><td>Revert</td><td>用于还原共享分支上一个特定提交中做出的变更。与 <code>reset</code> 不同，<code>revert</code> 不会从提交历史记录中删除任何内容，而是创建一个新的提交来反转已经存在的提交。这个命令通常用于处理公共分支，因为它不会删除 Git 历史记录中的任何内容。<strong>需要push，相当于一个命令</strong></td></tr></tbody></table><h4 id="6-1-git-reset-回滚到某次提交"><a href="#6-1-git-reset-回滚到某次提交" class="headerlink" title="6.1 git reset 回滚到某次提交"></a>6.1 git reset 回滚到某次提交</h4><p>git reset <code>[&lt;mode&gt;] [&lt;commit&gt;]</code></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–soft</td><td>头部重置为<code>&lt;commit&gt;</code>，但不更改工作树或索引。这将留下所有已更改但未提交的文件的“提交更改”。</td></tr><tr><td>–mixed</td><td>重置索引但不重置工作树（即保留更改的文件但未标记提交）并报告尚未更新的内容。（默认）</td></tr><tr><td>–hard</td><td>重置索引和工作树。<code>&lt;commit&gt;</code>后对工作树中跟踪文件的任何更改都将被丢弃。这将删除所有未提交的更改。</td></tr><tr><td>–merge</td><td>重置索引并更新工作树中与<code>&lt;commit&gt;</code>和<code>HEAD</code>之间不同的文件，但保留索引和工作树之间不同的文件。</td></tr><tr><td>–keep</td><td>重置索引条目并更新工作树中在<code>&lt;commit&gt;</code>和<code>HEAD</code>之间不同的文件。</td></tr></tbody></table><blockquote><p>重置分支通常应该与小心谨慎地使用，因为它可以永久性地删除您的更改。建议在进行重置之前，先创建一个分支备份，以便在需要时可以回滚到以前的状态。</p></blockquote><h4 id="6-2-git-revert-放弃某次提交"><a href="#6-2-git-revert-放弃某次提交" class="headerlink" title="6.2 git revert 放弃某次提交"></a>6.2 git revert 放弃某次提交</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git revert 前后的提交仍会保留在 git log 中，而此次撤销会做为一次新的提交。如果不想编辑提交消息，则可以使用 <code>-m</code> 标志自动使用默认消息。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert <span class="token parameter variable">-m</span> <span class="token string">"Revert commit &lt;commit&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>需要注意的是，<code>git revert</code> 撤销某个提交时，可能会导致代码冲突，需要手动解决冲突后再提交。</p></blockquote><h4 id="6-3-git-rebase"><a href="#6-3-git-rebase" class="headerlink" title="6.3 git rebase"></a>6.3 git rebase</h4><ul><li>编辑以前的提交消息</li><li>将多个提交合并为一个</li><li>删除或恢复不再需要的提交</li></ul><ol><li>重新设置另一个分支和当前分支状态之间的所有提交，即将当前分支中的提交重新应用到目标分支上</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase <span class="token parameter variable">--interactive</span> other_branch_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>对当前分支中的最后几个提交进行rebase</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~数字  <span class="token comment"># HEAD~数字 表示最近的几个commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>变基时有六个命令：</li></ol><ul><li><code>pick</code>：意味着包括该提交，可以更改提交的顺序。如果选择不包括提交，则应删除整行。</li><li><code>reword</code>：可以重新设置提交的消息，而提交所做的更改不受影响。</li><li><code>edit</code>：可以在 Rebase 过程中进行更多提交，然后继续 Rebase 操作，例如在两个提交之间插入更多提交。</li><li><code>squash</code>：可以将两个或多个提交合并为一个提交，而且该提交将被压缩到其上方的提交中。</li><li><code>fixup</code>：类似于 <code>squash</code>，但提交仅合并到其上方的提交中，并且舍弃消息。</li><li><code>exec</code>：可以对提交运行任意的 Shell 命令。</li></ul><table><thead><tr><th>问题</th><th>解决方案</th></tr></thead><tbody><tr><td>回滚本地工作区未暂存的改动</td><td>git checkout – <code>&lt;filename&gt;</code></td></tr><tr><td>回滚已暂存的改动，但未被提交</td><td>git reset –hard <code>&lt;commit&gt;</code></td></tr><tr><td>回滚commit所做的改动，生成新的commit，log不影响</td><td>git revert <code>&lt;commit&gt;</code></td></tr><tr><td>回滚已经提交的文件改动</td><td>git rebase -i <code>&lt;commit&gt;</code></td></tr></tbody></table><h3 id="7-标签"><a href="#7-标签" class="headerlink" title="7. 标签"></a>7. 标签</h3><p><code>标签（Tag）</code>是一个指向特定提交的引用，通常用于标记代码库中的重要版本或发布。通过为每个版本添加标签，用户可以轻松地跟踪软件的版本，并快速访问特定版本的代码。</p><h4 id="7-1-列显已有的标签"><a href="#7-1-列显已有的标签" class="headerlink" title="7.1 列显已有的标签"></a>7.1 列显已有的标签</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Git 自身项目仓库中，如果只对 <code>1.0</code> 系列的版本感兴趣，可以运行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-l</span> <span class="token string">'v1.0.*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-2-创建标签"><a href="#7-2-创建标签" class="headerlink" title="7.2 创建标签"></a>7.2 创建标签</h4><p>创建一个含附注类型的标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">'my version 1.0'</span><span class="token function">git</span> show v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>可以在后期对早先的某次提交加注标签</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示单个提交的日志消息和文本diff</span><span class="token function">git</span> show 日志ID<span class="token comment"># 为某个提交对象添加一个新的标签</span><span class="token function">git</span> tag 标签名称 日志ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-签署标签"><a href="#7-3-签署标签" class="headerlink" title="7.3 签署标签"></a>7.3 签署标签</h4><p>如果你有自己的私钥，还可以用 GPG 来签署标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-s</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">'my signed 1.0 tag'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-4-删除标签"><a href="#7-4-删除标签" class="headerlink" title="7.4 删除标签"></a>7.4 删除标签</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.0<span class="token comment"># 删除远程标签</span><span class="token function">git</span> push <span class="token parameter variable">--delete</span> origin v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-5-轻量级标签"><a href="#7-5-轻量级标签" class="headerlink" title="7.5 轻量级标签"></a>7.5 轻量级标签</h4><p>轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。不用参数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag v1.0-lw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-6-验证标签"><a href="#7-6-验证标签" class="headerlink" title="7.6 验证标签"></a>7.6 验证标签</h4><p>可以使用 <code>git tag -v [tag-name]</code> (译注：取 verify 的首字母)的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag <span class="token parameter variable">-v</span> v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-7-分享标签"><a href="#7-7-分享标签" class="headerlink" title="7.7 分享标签"></a>7.7 分享标签</h4><p>默认情况下，<code>git push</code> 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 <code>git push origin [tagname]</code> 即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要一次推送所有本地新增的标签上去，可以使用 <code>--tags</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT 工具整理</title>
      <link href="/2023/03/22/article20230322/"/>
      <url>/2023/03/22/article20230322/</url>
      
        <content type="html"><![CDATA[<h2 id="ChatGPT-工具整理"><a href="#ChatGPT-工具整理" class="headerlink" title="ChatGPT 工具整理"></a>ChatGPT 工具整理</h2><h3 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1. 搜索引擎"></a>1. 搜索引擎</h3><ul><li><a href="https://www.google.com/">谷歌</a> </li><li><a href="https://www.bing.com/">Bing</a> </li><li><a href="https://www.baidu.com/">百度</a> </li><li>……</li></ul><h3 id="2-ChatGPT"><a href="#2-ChatGPT" class="headerlink" title="2. ChatGPT"></a>2. ChatGPT</h3><ul><li><p><a href="https://chat.openai.com/">ChatGPT</a>  (官方网站)</p></li><li><p><a href="https://chat.theb.ai/">BAI Chat</a></p></li><li><p><a href="https://chatforai.com/">Chat For AI</a></p></li><li><p><a href="https://fastgpt.app/">Fast GPT</a></p></li><li><p><a href="https://chat35.com/">Chat35</a></p></li><li><p><a href="https://freegpt.one/">FreeGPT</a> </p></li><li><p>……</p></li></ul><h3 id="3-同级产品"><a href="#3-同级产品" class="headerlink" title="3. 同级产品"></a>3. 同级产品</h3><ul><li><p><a href="https://www.bing.com/new">New Bing</a></p></li><li><p><a href="https://www.notion.so/">Notion AI</a></p></li><li><p><a href="https://yiyan.baidu.com/">文心一言</a></p></li><li><p><a href="http://bard.google.com/">Bard</a></p></li><li><p>……</p></li></ul><h3 id="4-未来技术"><a href="#4-未来技术" class="headerlink" title="4. 未来技术"></a>4. 未来技术</h3><ul><li><p><a href="https://www.futurepedia.io/">FUTUREPEDIA</a></p></li><li><p><a href="https://promptbase.com/">PromptBase</a></p></li><li><p>……</p></li></ul><h3 id="5-论文生产力"><a href="#5-论文生产力" class="headerlink" title="5. 论文生产力"></a>5. 论文生产力</h3><ul><li><p><a href="https://www.explainpaper.com/">Explainpaper</a></p></li><li><p><a href="https://www.lateral.io/">LATERAL</a></p></li><li><p><a href="https://typeset.io/">SCISPACE</a></p></li><li><p><a href="https://arxivxplorer.com/">arXiv Xplorer</a></p></li><li><p><a href="http://pandagpt.io/">PandaGPT</a></p></li><li><p><a href="https://www.chatpdf.com/">ChatPDF</a></p></li><li><p><a href="https://chatexcel.com/convert">ChatExcel</a></p></li><li><p><a href="https://excelformulabot.com/">Excelformulabot</a></p></li><li><p><a href="https://promptdb.ai/">PromptDB</a></p></li><li><p><a href="https://chrome.google.com/webstore/detail/arxivgpt/fbbfpcjhnnklhmncjickdipdlhoddjoh?hl=en">ArxivGPT</a> （插件）</p></li></ul><ul><li>……</li></ul><h3 id="6-理解内容"><a href="#6-理解内容" class="headerlink" title="6. 理解内容"></a>6. 理解内容</h3><ul><li><a href="https://b.jimmylv.cn/">BiliGPT</a></li><li><a href="https://www.summarize.tech/">summarize.tech</a></li><li><a href="https://www.solidpoint.ai/">SolidPoint</a></li><li><a href="https://www.humata.ai/">Humata</a></li><li>……</li></ul>]]></content>
      
      
      <categories>
          
          <category> ChatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建进阶版</title>
      <link href="/2023/03/18/article20230318/"/>
      <url>/2023/03/18/article20230318/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么选择-Gitlab"><a href="#为什么选择-Gitlab" class="headerlink" title="为什么选择 Gitlab"></a>为什么选择 Gitlab</h2><ol><li><p>GitHub部署存在的问题</p><ul><li><p>不能被百度爬虫爬取，很难被百度收录</p></li><li><p>须本地生成静态网页后部署，并且很难异地或异机编辑</p></li></ul></li><li><p>GitLab的优点</p><ul><li><p>可被百度爬取内容，没有DNS污染</p></li><li><p>在GitLab服务器自动化部署，可以在线编辑md文档后直接部署</p></li><li><p>隐私保护程度高，仓库为私有仓库，但页面可以发布出去</p></li><li><p>有中文支持，<strong>Settings-&gt;Preferences-&gt;Localization-&gt;Language</strong> 选择语言中文</p></li></ul></li></ol><h2 id="移植博客并部署到-Gitlab上"><a href="#移植博客并部署到-Gitlab上" class="headerlink" title="移植博客并部署到 Gitlab上"></a>移植博客并部署到 Gitlab上</h2><h3 id="3-1-在-Gitlab-上创建仓库"><a href="#3-1-在-Gitlab-上创建仓库" class="headerlink" title="3.1 在 Gitlab 上创建仓库"></a>3.1 在 Gitlab 上创建仓库</h3><p>在 Gitlab 上创建一个新的仓库。您可以在 Gitlab 上创建一个新的仓库，仓库名称应该为 <code>&lt;username&gt;.gitlab.io</code>。其中，<code>&lt;username&gt;</code>是您的 Gitlab 用户名。一般来说仓库设定为私有就行。</p><blockquote><p>注意配置 git 和 ssh 免密登录</p><p><a href="https://github.com/jijunhao/git-skills/blob/main/02%E9%85%8D%E7%BD%AEGit.md">配置git</a>    <a href="https://github.com/jijunhao/git-skills/blob/main/%E9%99%84%E5%BD%95B-SSH%E5%AF%86%E5%8C%99.md">配置ssh密钥</a></p></blockquote><h3 id="3-2-下载-Gitlab-仓库"><a href="#3-2-下载-Gitlab-仓库" class="headerlink" title="3.2 下载 Gitlab 仓库"></a>3.2 下载 Gitlab 仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>git-repository-url<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-将已有的博客复制到本地仓库"><a href="#3-3-将已有的博客复制到本地仓库" class="headerlink" title="3.3 将已有的博客复制到本地仓库"></a>3.3 将已有的博客复制到本地仓库</h3><p>只需要复制<code>scaffolds</code>、<code>source</code>、<code>themes</code>和一些配置文件到gitlab的本地仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree <span class="token parameter variable">-L</span> <span class="token number">2</span><span class="token builtin class-name">.</span>├── scaffolds│   ├── draft.md│   ├── page.md│   └── post.md├── <span class="token builtin class-name">source</span>│   ├── _posts│   ├── _drafts├── themes├── _config.yml├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意需要卸载 hexo-deployer-git 及其相关配置文件，或者直接修改package.json</p></blockquote><h3 id="3-4-创建一个自动化部署文件"><a href="#3-4-创建一个自动化部署文件" class="headerlink" title="3.4  创建一个自动化部署文件"></a>3.4  创建一个自动化部署文件</h3><p>创建一个<code>.gitlab-ci.yml</code> 的文件，可以直接创建，也可以在网页端创建。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span>18.9.1<span class="token key atrule">pages</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> node_modules/  <span class="token key atrule">script</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> npm install hexo<span class="token punctuation">-</span>cli <span class="token punctuation">-</span>g  <span class="token punctuation">-</span> npm install  <span class="token punctuation">-</span> hexo clean  <span class="token punctuation">-</span> hexo generate  <span class="token punctuation">-</span> hexo deploy  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>    <span class="token key atrule">paths</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> public  <span class="token key atrule">only</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-部署到-Gitlab"><a href="#3-5-部署到-Gitlab" class="headerlink" title="3.5 部署到 Gitlab"></a>3.5 部署到 Gitlab</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"update blog"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>以后每次异地修改只要 git pull，然后运行上面三条命令即可</p></blockquote><h3 id="3-6-修改-Pages-权限"><a href="#3-6-修改-Pages-权限" class="headerlink" title="3.6 修改 Pages 权限"></a>3.6 修改 Pages 权限</h3><p>进入设置，把Pages权限设置为<code>everyone</code>。非常重要！！</p><p>完成推送后在项目里点击 <code>CI/CD</code> 查看，显示成功部署即可由<code>https://username.gitlab.io/</code>访问你的博客</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ机器人——接入ChatGPT</title>
      <link href="/2023/03/13/article20230313/"/>
      <url>/2023/03/13/article20230313/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>参考文献</strong></p><p><a href="https://chat.openai.com/">ChatGPT</a></p><p><a href="https://platform.openai.com/account/api-keys">ChatGPT的api管理平套</a></p><p><a href="https://github.com/lss233/chatgpt-mirai-qq-bot">ChatGPT Mirai QQ Bot</a></p><p><a href="https://mirai.mamoe.net/topic/223/%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%B4%E6%97%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88">mirai无法登录的临时解决方案</a></p><p><a href="https://github.com/cssxsh/fix-protocol-version">mirai临时登录协议修复插件</a></p><p><a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a></p><p><a href="https://github.com/lss233/chatgpt-mirai-qq-bot/issues/311">go-cqhttp扫码登陆解决方案</a></p></blockquote><h1 id="QQ机器人——接入ChatGPT"><a href="#QQ机器人——接入ChatGPT" class="headerlink" title="QQ机器人——接入ChatGPT"></a>QQ机器人——接入ChatGPT</h1><h2 id="ChatGPT简介"><a href="#ChatGPT简介" class="headerlink" title="ChatGPT简介"></a>ChatGPT简介</h2><p><code>ChatGPT</code> 是一种基于人工智能的对话机器人，使用了深度学习技术和自然语言处理技术进行训练和优化。<code>ChatGPT</code> 能够通过和用户的对话来回答各种各样的问题、解决问题和提供建议，支持多种语言和主题，可以用于各种不同的应用领域，如教育、客户服务、娱乐、医疗保健等。由于它可以从数百万条对话中学习并自我改进，因此越来越受欢迎。</p><ul><li><p><strong>对话</strong>：ChatGPT能够进行普通的聊天对话，并且可以回答一些简单的问题，例如天气、时间等。 </p></li><li><p><strong>知识问答</strong>：ChatGPT拥有广泛的知识库，可以回答各种问题，例如历史事件、科学知识、地理信息等。</p></li><li><p><strong>文本生成</strong>：ChatGPT可以生成各种形式的文本，例如诗歌、小说、新闻报道、文书、代码等。</p></li><li><p><strong>语言翻译</strong>：ChatGPT可以进行语言翻译，支持多种语言之间的互译。</p></li><li><p><strong>文本分类</strong>：ChatGPT可以将文本进行分类，例如将新闻分类为体育、政治、娱乐等。</p></li><li><p><strong>信息检索</strong>：ChatGPT可以根据关键词和上下文进行信息检索，返回相关的结果。</p></li><li><p>……</p></li></ul><p><code>ChatGPT</code> 能够回答各种类型的问题，例如代码生成、Excel 的操作命令、生活小常识、论文写作和翻译等。但对于普通用户来说使用 <code>ChatGPT</code> 的门槛很高，首先得想办法连接外网，其次还得注册官方的账号，最好还得有基础和条件的搭建一个 QQ 机器人。日常生活中想要更加方便的使用  <code>ChatGPT</code>，随时随地的沟通和解决问题，当然是将其设置成微信聊天机器人、QQ 聊天机器人、钉钉机器人、Telegram 机器人等。但一般不建议使用微信机器人，微信与个人信息绑定极为紧密，一个手机号一个身份证只能注册一个微信，并且还有微信钱包等功能，若涉及一些危险言论导致封号，那将是无法挽回的损失。下面给出一个比较优秀的 QQ机器人部署方案。</p><blockquote><p><strong>注</strong>：针对不同人群，每个人都应该有属于自己的使用方案。</p><ul><li>没有 ChatGPT 账号的且不具备软硬件条件的人，仅需要加入已经搭建好的 QQ 机器人群就能使用，但需谨防上当受骗</li><li>拥有 ChatGPT 账号的，请安装 <a href="https://github.com/lencx/ChatGPT">ChatGPT桌面版</a>，该方案能够便利的在桌面启动和刷新 ChatGPT，并且拥有聊天记录保存和切换AI等多项功能</li><li>有一定代码基础和硬件条件的，熟悉docker、python等常用开发工具的人，可以选择自己搭建一个 QQ 机器人，便利自己且供身边的人使用</li></ul><p>！！无论是哪种方式，使用 <code>ChatGPT</code> 时都要遵守法律法规和相关规定，不得进行危害社会稳定、违反公序良俗的言论和行为。</p></blockquote><h2 id="1-前提准备"><a href="#1-前提准备" class="headerlink" title="1. 前提准备"></a>1. 前提准备</h2><ul><li>需要一个官网注册的，能够正常访问网页的 <code>OpenAI账号</code></li><li>需要一个能够正常交流的 <code>QQ号</code>，建议用小号。（每个手机号可以注册多个QQ）</li><li>需要一台 <code>Linux服务器</code> 或者一台 <code>Windows服务器</code></li><li>如果处于国内，需要一个翻墙工具（例如 <code>Clash</code>、<code>V2ray</code> 等）或者部署在境外的服务器</li></ul><h2 id="2-软件包下载"><a href="#2-软件包下载" class="headerlink" title="2. 软件包下载"></a>2. 软件包下载</h2><p> <code>chatgpt-mirai-qq-bot</code> 在 <code>github</code> 上已经进行开源，支持在 <code>Liunx</code> 和 <code>window</code> 上部署。</p><p>请进入项目的<a href="https://github.com/lss233/chatgpt-mirai-qq-bot/releases">Releases</a>下载<strong>最新版</strong>的windows-quickstart安装包或者使用<strong>最新版</strong>的linux一键部署。</p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303131929437.png" style="zoom:80%;"><blockquote><p><strong>注</strong>：GitHub Release 是一个功能，用于发布和分发软件或项目的版本和发布包，一般来说只需要下载最新版的即可。</p></blockquote><h2 id="3-Windows下快速部署"><a href="#3-Windows下快速部署" class="headerlink" title="3. Windows下快速部署"></a>3. Windows下快速部署</h2><blockquote><p>作为一个 AI 模型，ChatGPT 并不会直接连接到 QQ 平台发消息。相反，需要借助一些中间软件来实现与 QQ 的通信，如 Mirai 或 Onebot。</p><p>以下是一般情况下连接 ChatGPT 和 QQ 的基本流程：</p><ol><li>初始化：首先需要准备好两个环境，即 Mirai 或 Onebot 的环境和 ChatGPT 的环境。在 Mirai 或 Onebot 环境中，需要安装好对应的插件（例如 Mirai-HTTP 和 Mirai-WebSocket）以及配置文件等。在这个项目中，只需要点击<code>初始化.cmd</code>即可</li><li>配置登录信息：需要编辑配置文件 <code>chatgpt/config.cfg</code>，设置 QQ 号码、密码等登录信息和OpenAI等信息。</li><li>启动 <code>Mirai</code> 或 <code>Onebot</code>：通过命令行启动 Mirai 或 Onebot，使其运行在后台。这样 ChatGPT 就能够通过 API 访问 Mirai 或 Onebot 提供的 QQ 服务了。</li><li>启动 <code>ChatGPT</code>：在 ChatGPT 的环境中，需要编写代码来实现与 Mirai 或 Onebot 的通信。可以使用相应的 SDK 或 API，如 QQbot-sdk 或者 cqhttp-sdk。Mirai 和 chatgpt-mirai-qq-bot 之间则使用 Websocket 进行通信，将两者连接起来。在这个项目里这些都是设定好的。</li><li>连接 QQ 发消息：使用 ChatGPT 的 API，调用 Mirai 或 Onebot 的接口来连接到 QQ 并发送消息。</li></ol><p>需要注意的是，这只是一个基本流程，实际应用中可能还需要进行更多的设置和配置。此外，还需要保证 Mirai 或 Onebot 的稳定性和安全性，防止出现一些不必要的问题。</p></blockquote><p>本地解压下载好的安装包后，会有<code>chagpt</code>、<code>files</code>、<code>mirai</code>和<code>初始化.cmd</code>。双击其中的 <code>初始化.cmd</code> 进行环境初始化，一路回车，期间会跳出来一个<code>conifg.cfg</code>文件，可以直接修改也可以后期修改（在<code>chatgpt/config.cfg</code>里面）</p><h3 id="3-1-配置文件完整介绍"><a href="#3-1-配置文件完整介绍" class="headerlink" title="3.1 配置文件完整介绍"></a>3.1 配置文件完整介绍</h3><p>配置文件主要包含 <code>onebot连接信息</code>、<code>mirai连接信息</code>和 <code>OpenAI登录信息</code>三大部分。</p><blockquote><p><strong>注：</strong>onebot 和 mirai 只要填写一个机器人就行，另一个用#全部注释</p></blockquote><ul><li><code>onebot连接信息</code>（使用的是 <code>go-cqhttp</code> 的扫码登录方式，但 QQ 发送图片会出现bug）</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>onebot<span class="token punctuation">]</span><span class="token comment"># onebot 相关设置</span>qq=请修改为你机器人的QQ号manager_qq = 请修改为机器人管理员的QQ号<span class="token comment"># 此处的  reverse_ws_host 和 reverse_ws_port 对应</span><span class="token comment"># go-cqhttp 中的 反向WS Universal 地址，如：ws://localhost:6555/ws</span>reverse_ws_host = "localhost"reverse_ws_port = 6555<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>mirai连接信息</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>mirai<span class="token punctuation">]</span><span class="token comment"># Mirai 相关设置</span>qq = 请填写机器人的 QQ 号manager_qq = 请修改为机器人管理员的QQ号api_key = "1234567890" <span class="token comment"># mirai-http-api 中的 verifyKey </span>reverse_ws_host = "0.0.0.0"   <span class="token comment"># 0.0.0.0指任意ip</span>reverse_ws_port = 8554<span class="token comment"># # 下面是 mirai api http 正向连接模式</span><span class="token comment"># 使用此模式时需注释上面的反向连接模式 </span><span class="token comment"># 要么http+ws要么直接反代reverse_w,建议用反代</span><span class="token comment"># http_url = "http://localhost:8080"</span><span class="token comment"># ws_url = "http://localhost:8080"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>OpenAI登录信息</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>openai<span class="token punctuation">]</span><span class="token comment"># OpenAI 相关设置</span><span class="token comment"># 第 1 个 OpenAI 账号的登录信息</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 里面是一些设置</span><span class="token comment"># 第 2 个 OpenAI 账号的登录信息</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 里面是一些设置</span><span class="token comment"># 第 3 个 OpenAI 账号的登录信息</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 里面是一些设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-1-OpenAI-多账号支持"><a href="#3-1-1-OpenAI-多账号支持" class="headerlink" title="3.1.1 OpenAI 多账号支持"></a>3.1.1 OpenAI 多账号支持</h4><p>可以登录多个不同的 OpenAI 账号，当机器人开始产生新对话时，会从你登录的账号中选择<strong>一个</strong>来使用 ChatGPT 和用户聊天。</p><p>（这可以降低聊天频率限制出现的概率）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>openai<span class="token punctuation">]</span><span class="token comment"># OpenAI 相关设置</span><span class="token comment"># 第 1 个 OpenAI 账号的登录信息</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 里面是一些设置</span><span class="token comment"># 第 2 个 OpenAI 账号的登录信息</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 里面是一些设置</span><span class="token comment"># 第 3 个 OpenAI 账号的登录信息</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 里面是一些设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-OpenAI的设置（主要是无浏览器模式的接入点设置）"><a href="#3-1-2-OpenAI的设置（主要是无浏览器模式的接入点设置）" class="headerlink" title="3.1.2 OpenAI的设置（主要是无浏览器模式的接入点设置）"></a>3.1.2 OpenAI的设置（主要是无浏览器模式的接入点设置）</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>openai<span class="token punctuation">]</span><span class="token comment"># OpenAI 相关设置</span><span class="token comment"># 自定义 ChatGPT 的 browserless 接入点</span><span class="token comment"># 自 3月9日 开始，不设置此项将无法正常使用 browserless 模式下的网页版 ChatGPT</span><span class="token comment"># browser模式没法用，browserless要endpoint，如果有可以选择自定义</span>browserless_endpoint = "https<span class="token punctuation">:</span>//bypass.duti.tech/"<span class="token comment"># 自定义 OpenAI 的 API 接口基础地址</span><span class="token comment"># 通过此功能，你可以搭建一个 OpenAI 的反向代理来避免网络问题</span><span class="token comment"># 例如此项目：https://github.com/Ice-Hazymoon/openai-scf-proxy</span><span class="token comment"># api_endpoint = "https://api.openai.com/v1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-账号登录模式选择"><a href="#3-1-3-账号登录模式选择" class="headerlink" title="3.1.3 账号登录模式选择"></a>3.1.3 账号登录模式选择</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 模式选择</span>mode = "browserless"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>支持的模式有：</p><ul><li>browser - 浏览器登录。该模式会在你的电脑上启动一个 Chrome 浏览器来登录并验证 OpenAI，该模式成功率较低。</li><li>browserless - 无浏览器模式。该模式将你的<strong>聊天请求</strong>发送到第三方服务器进行认证，从而不需要浏览器，该模式成功率较高。（推荐）</li></ul><h4 id="3-1-4-邮箱密码登录"><a href="#3-1-4-邮箱密码登录" class="headerlink" title="3.1.4 邮箱密码登录"></a>3.1.4 邮箱密码登录</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 你的 OpenAI 邮箱</span>email = "xxxx" <span class="token comment"># 你的 OpenAI 密码</span>password = "xxx"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-5-session-token-登录"><a href="#3-1-5-session-token-登录" class="headerlink" title="3.1.5 session_token 登录"></a>3.1.5 session_token 登录</h4><p>对于通过 Google 登录或者微软登录的同学，可以使用 session_token 方式进行登录。使用这种方式登录时不需要填写<strong>密码</strong>。</p><p>需要注意的是，session_token 过期比较频繁，过期后需要重新设置。</p><p>session_token 的获取方式可参考：<a href="https://github.com/lss233/chatgpt-mirai-qq-bot/issues/96">请问怎么获取 session_token</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span>session_token = "一串 ey 开头的东西"email = "你的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-6-access-token-登录"><a href="#3-1-6-access-token-登录" class="headerlink" title="3.1.6 access_token 登录"></a>3.1.6 access_token 登录</h4><p>配合 <code>mode="browserless"</code>使用，这种方式登录时不需要填写邮箱和密码、session_token。<br>这种方法比较适合登录时出现 Unknown error,或者回答问题时出现有关 Access Token报错的情况。<br>你需要自己登录 OpenAI 网站，然后访问 <a href="https://chat.openai.com/api/auth/session">https://chat.openai.com/api/auth/session</a> ，你可以看到一段类似下面的代码：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"user-*****"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span><span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span><span class="token property">"image"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span><span class="token property">"picture"</span><span class="token operator">:</span> <span class="token string">"***"</span><span class="token punctuation">,</span><span class="token property">"groups"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"expires"</span><span class="token operator">:</span> <span class="token string">"2023-03-18T09:11:03.546Z"</span><span class="token punctuation">,</span><span class="token property">"accessToken"</span><span class="token operator">:</span> <span class="token string">"eyJhbGciOiJS*****X7GdA"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取以上 JSON 中<code>accessToken</code> 后面的值即可，有效期在 30 天左右。过期后需要重新设置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span>access_token = "一串内容为 eyJhbGciOiJS<span class="token important">*****X7GdA</span> 的东西"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-1-7-使用正向代理（国内搭建的记得开代理）"><a href="#3-1-7-使用正向代理（国内搭建的记得开代理）" class="headerlink" title="3.1.7 使用正向代理（国内搭建的记得开代理）"></a>3.1.7 使用正向代理（国内搭建的记得开代理）</h4><p>如果你的网络访问 OpenAI 出现一直弹浏览器的问题，或者你的 IP 被封锁了，可以通过配置代理的方式来连接到 OpenAI。</p><p>支持使用正向代理方式访问 OpenAI，你需要一个 HTTP/HTTPS 代理服务器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 请注意，由于现在 OpenAI 封锁严格，你需要一个</span><span class="token comment"># 尽量使用独立的代理服务器，不要使用和其他人共用 IP 的代理</span><span class="token comment"># 否则会出现无限弹出浏览器的问题</span><span class="token comment"># 在账号下面加入</span>proxy="http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>1080"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-8-对话标题自动重命名"><a href="#3-1-8-对话标题自动重命名" class="headerlink" title="3.1.8 对话标题自动重命名"></a>3.1.8 对话标题自动重命名</h4><p>如果你的账号产生了太多的对话，看着不舒服，可以开启配置文件中的标题自动重命名和。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 在账号下面加入</span>title_pattern="qq<span class="token punctuation">-</span><span class="token punctuation">{</span>session_id<span class="token punctuation">}</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当你按照这个格式进行设置之后，新创建的对话将会以 <code>qq-friend-好友QQ</code> 或 <code>qq-group-群号</code> 进行命名。</p><p>这里的 <code>{session_id}</code> 是一个变量，它在程序启动之后会根据聊天信息的发送者动态变化。</p><ul><li>如果是一个好友给机器人发送消息，则 <code>{session_id}</code> 会变成 <code>qq-friend-好友QQ</code></li><li>如果是一个群聊给机器人发送消息，则 <code>{session_id}</code> 会变成 <code>qq-group-群号</code></li></ul><h4 id="3-1-9-其他功能自行探索"><a href="#3-1-9-其他功能自行探索" class="headerlink" title="3.1.9 其他功能自行探索"></a>3.1.9 其他功能自行探索</h4><ul><li>管理员命令</li><li>预设加载</li><li>接入new bing</li><li>……</li></ul><h3 id="3-2-启动Mirai"><a href="#3-2-启动Mirai" class="headerlink" title="3.2 启动Mirai"></a>3.2 启动Mirai</h3><p><strong>简介：</strong><code>Mirai</code>是一个基于Java开发的聊天机器人框架，最初是为QQ平台开发的，但现在也支持其他平台（如微信和Telegram）。Mirai提供了许多插件，如定时发送消息、自动回复、群管理等等，使得开发者可以轻松地定制自己的聊天机器人。</p><p>使用步骤：</p><ul><li><p>点击 <code>Mirai.cmd</code>，第一次启动会下载很多环境，无需理会。<strong>这个脚本主要用来登录 <code>QQ</code> 机器人账号的</strong></p></li><li><p>登录机器人命令：<code>login &lt;机器人QQ账号&gt; &lt;机器人QQ密码&gt; &lt;登录协议&gt;</code></p></li></ul><blockquote><p><strong>注：</strong>目前的登录协议有ANDROID_PHONE、ANDROID_PAD、ANDROID_WATCH、IPAD、MACOS</p><p>最新版的Mirai官方建议使用MACOS登录协议，以防止账号无法登录的情况，如45、237、238等</p></blockquote><ul><li>第一次启动后，可以在 <code>mirai/config/Console/AutoLogin.yml</code> 里面设置自动登录（设置好后，下次启动<code>Mirai.cmd</code>就不用输入机器人登录命令了）</li></ul><p>参考如下设置:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">accounts</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token comment"># 账号, 现只支持 QQ 数字账号</span>    <span class="token key atrule">account</span><span class="token punctuation">:</span> 输入你的QQ数字账号    <span class="token key atrule">password</span><span class="token punctuation">:</span>       <span class="token comment"># 密码种类, 可选 PLAIN 或 MD5</span>      <span class="token key atrule">kind</span><span class="token punctuation">:</span> PLAIN      <span class="token comment"># 密码内容, PLAIN 时为密码文本, MD5 时为 16 进制</span>      <span class="token key atrule">value</span><span class="token punctuation">:</span> 输入你的密码（密码最好不要超过16位）    <span class="token comment"># 账号配置. 可用配置列表 (注意大小写):</span>    <span class="token comment"># "protocol": "ANDROID_PHONE" / "ANDROID_PAD" / "ANDROID_WATCH" / "MACOS" / "IPAD"</span>    <span class="token comment"># "device": "device.json"</span>    <span class="token comment"># "enable": true</span>    <span class="token comment"># "heartbeatStrategy": "STAT_HB" / "REGISTER" / "NONE"</span>    <span class="token key atrule">configuration</span><span class="token punctuation">:</span>       <span class="token key atrule">protocol</span><span class="token punctuation">:</span> MACOS      <span class="token key atrule">device</span><span class="token punctuation">:</span> device.json      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">heartbeatStrategy</span><span class="token punctuation">:</span> STAT_HB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：采用mirai反向代理得配置文件在mirai/config/net.mamoe.mirai-api-http/setting.yml</p><p>验证key和反向代理要与配置文件config/config.cfg中一样才能进行通信</p></blockquote><h3 id="3-3-启动go-cqhttp，这个可以扫码登录QQ（当使用Onebot机器人的时候）"><a href="#3-3-启动go-cqhttp，这个可以扫码登录QQ（当使用Onebot机器人的时候）" class="headerlink" title="3.3 启动go-cqhttp，这个可以扫码登录QQ（当使用Onebot机器人的时候）"></a>3.3 启动go-cqhttp，这个可以扫码登录QQ（当使用Onebot机器人的时候）</h3><p><strong>简介：</strong><code>Onebot</code>是一个基于CQHTTP协议开发的聊天机器人框架，它支持多个平台（如QQ、微信、Telegram等），同时也提供了许多插件和工具，方便开发者创建自己的聊天机器人。Onebot提供了标准化的消息格式和事件处理机制，使得不同平台之间的开发变得更加简单和方便。</p><p><strong>简介：</strong><code>go-cqhttp</code>是一个使用Go语言编写的开源跨平台的机器人的HTTP插件，它通过HTTP协议将机器人接入到第三方平台，例如QQ群、Telegram和Discord等。它支持多个账号、多个协议、多个插件，可以满足各种不同场景下的需求。go-cqhttp提供了方便易用的API，可以帮助开发者快速构建自己的机器人应用。同时，它也支持插件机制，开发者可以通过插件来扩展其功能。由于其开源、跨平台、易用的特点，go-cqhttp已经成为了国内外开发者构建机器人应用的主要工具之一。</p><p>使用步骤：</p><ul><li>进入Releases下载 <a href="https://github.com/Mrs4s/go-cqhttp/releases">go-cqhttp</a></li></ul><blockquote><p>注意：下载正确对应的版本</p><p>darwin是macos的</p><p>amd是X86架构的CPU，32位版；arm是ARM架构的CPU，32位版</p><p>amd64是X86架构的CPU，64位版；arm64是ARM架构的CPU，64位版</p></blockquote><ul><li><p>下载安装包到本地，解压后，运行其中的 <code>go-cqhttp.bat</code></p></li><li><p>输入<code>3</code>，会生成配置文件：<code>config.yaml</code></p></li><li><p>打开配置文件<code>config.yaml</code>，只需要配置两个地方：account和servers</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">account</span><span class="token punctuation">:</span> <span class="token comment"># 账号相关</span>  <span class="token key atrule">uin</span><span class="token punctuation">:</span> 输入机器人QQ账号 <span class="token comment"># QQ账号</span>    <span class="token comment"># 其他保持不动</span><span class="token key atrule">servers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">ws-reverse</span><span class="token punctuation">:</span>      <span class="token key atrule">universal</span><span class="token punctuation">:</span> ws<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>6555/ws  <span class="token comment"># 与onebot信息设置一致才能通信</span>        <span class="token comment"># 其他保持不动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>再次运行 <code>go-cqhttp.bat</code>，生成虚拟文件，这一次不用扫码，只是为了生成虚拟设备文件，然后关闭即可</p></li><li><p>打开生成的虚拟文件：<code>device.json</code>，将其中的 <code>protocol</code>参数改成2</p></li><li><p>再重新启动 go-cqhttp，这时候可以扫码登录 QQ 了（注意 go-cqhttp 的启动网络要与扫码网络保持一致）</p></li></ul><h3 id="3-3-启动ChatGPT"><a href="#3-3-启动ChatGPT" class="headerlink" title="3.3 启动ChatGPT"></a>3.3 启动ChatGPT</h3><ul><li>设置好<code>chatgpt/config.cfg</code>点击启动 <code>ChatGPT.cmd</code> ，自动会登录 <code>openai</code></li></ul><p>一个简单的基于mirai启动的配置文件实例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>mirai<span class="token punctuation">]</span>qq = 请修改为你机器人的QQ号（小号）manager_qq = 请修改为机器人管理员的QQ号（大号）api_key = "1234567890"reverse_ws_host = "0.0.0.0"reverse_ws_port = 8554<span class="token comment"># # 下面是 mirai api http 正向连接模式</span><span class="token comment"># 使用此模式时需注释上面的反向连接模式</span><span class="token comment"># http_url = "http://localhost:8080"</span><span class="token comment"># ws_url = "http://localhost:8080"</span><span class="token punctuation">[</span>openai<span class="token punctuation">]</span>browserless_endpoint = "https<span class="token punctuation">:</span>//bypass.duti.tech/"<span class="token comment"># 第一个账号</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span>mode = "browserless"<span class="token comment"># 你的 OpenAI 邮箱</span>email = "xxxx"<span class="token comment"># 你的 OpenAI 密码</span>password = "xxx"<span class="token comment"># clash代理的端口号</span>proxy="http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>7890"<span class="token comment"># 使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）</span>paid = false<span class="token comment"># 是否开启标题自动重命名</span>title_pattern="qq<span class="token punctuation">-</span><span class="token punctuation">{</span>session_id<span class="token punctuation">}</span>"<span class="token comment"># 是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</span>auto_remove_old_conversations = true<span class="token comment"># 第二个账号</span><span class="token punctuation">[</span><span class="token punctuation">[</span>openai.accounts<span class="token punctuation">]</span><span class="token punctuation">]</span>api_key="sk<span class="token punctuation">-</span>xxxxx"proxy="http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>7890"<span class="token comment"># 是否开启标题自动重命名</span>title_pattern="qq<span class="token punctuation">-</span><span class="token punctuation">{</span>session_id<span class="token punctuation">}</span>"<span class="token comment"># 是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</span>auto_remove_old_conversations = true<span class="token punctuation">[</span>baiducloud<span class="token punctuation">]</span><span class="token comment">#是否启动百度云内容安全审核</span>check = false<span class="token comment">#百度云API_KEY 24位英文数字字符串</span>baidu_api_key = ""<span class="token comment">#百度云SECRET_KEY 32位的英文数字字符串</span>baidu_secret_key =""<span class="token comment">#不合规消息自定义返回</span>illgalmessage = "<span class="token punctuation">[</span>百度云<span class="token punctuation">]</span>请珍惜机器人，当前返回内容不合规"<span class="token punctuation">[</span>system<span class="token punctuation">]</span><span class="token comment"># 是否自动同意进群邀请</span>accept_group_invite = false<span class="token comment"># 是否自动同意好友请求</span>accept_friend_request = false<span class="token punctuation">[</span>presets<span class="token punctuation">]</span><span class="token comment"># 切换预设的命令： 加载预设 猫娘</span>command = "加载预设 (\\w+)"loaded_successful = "预设加载成功！"scan_dir = "./presets/"<span class="token punctuation">[</span>presets.keywords<span class="token punctuation">]</span><span class="token comment"># 预设关键词 &lt;-&gt; 实际文件</span>"正常" = "presets/default.txt""猫娘" = "presets/catgirl.txt"<span class="token comment"># "default" = "presets/default.txt" # 默认预设，开启后所有的会话都会先读这个预设，谨慎使用！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>登录成功后，说明 <code>QQ</code> 机器人已经连接上了 <code>ChatGPT</code>，此时即可跟机器人聊天了</li></ul><h2 id="4-Linux下一键快速部署"><a href="#4-Linux下一键快速部署" class="headerlink" title="4. Linux下一键快速部署"></a>4. Linux下一键快速部署</h2><p>在linux服务器上输入最新版的命令即可，命令基于docker容器技术，会自动安装docker并拉取最新版的镜像。</p><p>配置文件路径和功能与Windows几乎一致，请参考前文的配置信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># chatgpt-qq下的文件</span>tree<span class="token builtin class-name">.</span>├── config.cfg├── docker-compose.yaml└── mirai    ├── config    │   ├── Console    │   │   ├── AutoLogin.yml    │   │   ├── Command.yml    │   │   ├── Logger.yml    │   │   ├── PermissionService.yml    │   │   └── PluginDependencies.yml    │   └── net.mamoe.mirai-api-http    │       └── setting.yml    └── data        └── xyz.cssxsh.mirai.mirai-device-generator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>config.cgf</code> 是配置 openai 和 QQ 的文件（修改文件后重新运行即可<code>docker-compose up -d</code>）</li><li><code>docker-compose.yml</code> 指定了需要启动的容器、服务、映像等信息 </li><li><code>AutoLogin.yml</code> 是 mirai 的自动登录配置 </li><li><code>setting.yml</code> 是包含 mirai 的 api 接口信息</li></ul><p>一键安装命令本质是执行一个shell脚本，用于自动部署chatgpt-mirai-qq-bot程序。下面是脚本的功能：</p><ul><li>自动检测curl，docker和docker-compose是否已安装，如果未安装，则提示安装并安装；</li><li>下载docker-compose.yaml和config.cfg文件；</li><li>对config.cfg文件进行相应修改；</li><li>创建setting.yml文件；</li></ul><p>需要用户输入的信息有：</p><ul><li>OpenAI的API Key;</li><li>OpenAI的邮箱地址和密码;</li><li>QQ机器人账号和密码;</li><li>……</li></ul><p>如果程序已经安装，则提示无法重复安装，并提供升级和重装的命令。</p><p>如果用户选择升级，则进行 <code>docker-compose pull</code>和 <code>docker-compose up -d</code> 操作。</p><ul><li><p><code>docker-compose up -d</code> 后台启动所有容器（在 docker-compose.yaml 里面都写好）</p></li><li><p><code>docker-compose logs chatgpt -f</code> 来查看chatgpt的实时日志</p></li></ul><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h2><h3 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h3><h4 id="5-1-1-切换AI-xxx"><a href="#5-1-1-切换AI-xxx" class="headerlink" title="5.1.1 切换AI xxx"></a>5.1.1 切换AI xxx</h4><p>切换至另一个 AI 引擎。<br>目前支持的有：</p><ul><li>chatgpt-web - OpenAI ChatGPT 网页版</li><li>chatgpt-api - OpenAI ChatGPT API 版</li><li>bing-c - New Bing (新必应对话风格-创造力)</li><li>bing-p - New Bing (新必应对话风格-精确)</li><li>bing-b - New Bing (新必应对话风格-平衡)</li></ul><h4 id="5-1-2-文本模式"><a href="#5-1-2-文本模式" class="headerlink" title="5.1.2 文本模式"></a>5.1.2 文本模式</h4><p>开启后，接下来的消息都用文字的方式回复。</p><h4 id="5-1-3-图片模式"><a href="#5-1-3-图片模式" class="headerlink" title="5.1.3 图片模式"></a>5.1.3 图片模式</h4><p>开启后，接下来的消息都用图片的方式回复。</p><h4 id="5-1-4-重置会话"><a href="#5-1-4-重置会话" class="headerlink" title="5.1.4 重置会话"></a>5.1.4 重置会话</h4><p>清空机器人的记忆，重新开始聊天。</p><h4 id="5-1-5-回滚会话"><a href="#5-1-5-回滚会话" class="headerlink" title="5.1.5 回滚会话"></a>5.1.5 回滚会话</h4><p>相当于撤回消息，让机器人忘记你最后一次发的内容。</p><h4 id="5-1-6-加载预设-xxx"><a href="#5-1-6-加载预设-xxx" class="headerlink" title="5.1.6 加载预设 xxx"></a>5.1.6 加载预设 xxx</h4><p>让机器人加载某个特定的预设。 对于预设的玩法，请见右侧菜单。</p><h4 id="5-1-7-画-xxx-或-画-一张图片"><a href="#5-1-7-画-xxx-或-画-一张图片" class="headerlink" title="5.1.7 画 xxx 或 画 + 一张图片"></a>5.1.7 画 xxx 或 画 + 一张图片</h4><p>最低版本: 2.2.0</p><p>通过 DALL.E 进行 AI 画图(<strong>需要你设置 OpenAI 的 api_key</strong>)</p><h3 id="5-2-管理员命令"><a href="#5-2-管理员命令" class="headerlink" title="5.2 管理员命令"></a>5.2 管理员命令</h3><h4 id="5-2-1-重新加载配置文件"><a href="#5-2-1-重新加载配置文件" class="headerlink" title="5.2.1 .重新加载配置文件"></a>5.2.1 .重新加载配置文件</h4><p>让机器人的配置文件重新加载</p><h4 id="5-2-2-设置额度"><a href="#5-2-2-设置额度" class="headerlink" title="5.2.2 设置额度"></a>5.2.2 设置额度</h4><h2 id="安装后效果示例"><a href="#安装后效果示例" class="headerlink" title="安装后效果示例"></a>安装后效果示例</h2><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303132001567.png" style="zoom: 67%;"><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303132001474.png" style="zoom:67%;"><h2 id="常见错误分析"><a href="#常见错误分析" class="headerlink" title="常见错误分析"></a>常见错误分析</h2><p>在连接 ChatGPT 和 QQ 的过程中，可能会出现以下一些错误：</p><ol><li>环境配置错误：Mirai 或 Onebot 的环境配置不正确，例如缺少依赖库、配置文件格式错误等，都可能导致启动失败。</li><li>登录信息错误：在配置文件中输入的 QQ 号码或密码错误，或者验证码输入错误，都可能导致登录失败。</li><li>网络连接错误：在与 QQ 进行通信的过程中，可能会出现网络连接问题，例如服务器繁忙、网络延迟等，导致消息发送失败或响应超时。</li><li>API 使用错误：在调用 API 的过程中，可能会出现参数不正确、接口不存在、API 版本不匹配等问题，导致请求失败。</li><li>安全问题：如果 Mirai 或 Onebot 的权限设置不当，可能会导致账号信息泄露、恶意攻击等安全问题。</li><li>代码错误：在编写 ChatGPT 的代码时，可能会出现语法错误、逻辑错误等问题，导致程序无法正常运行。</li></ol><p>针对这些错误，可以通过仔细检查配置文件、排查网络连接问题、检查 API 使用等方式来解决。同时，也可以参考github中的解决方案和文档，以及向相关技术人员寻求帮助。</p><blockquote><p>注意抓住几个核心问题：</p><ul><li>在哪一步报错的</li><li>报什么错</li><li>有可能是什么原因导致的</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是部署QQ机器人的流程，当然还有很多功能等着大家探索，可以根据自己的喜好调整，自己探索把。</p>]]></content>
      
      
      <categories>
          
          <category> ChatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ机器人 </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎高级指令</title>
      <link href="/2023/02/08/article20230208/"/>
      <url>/2023/02/08/article20230208/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>搜索引擎的高级指令是一些在搜索时能够增强搜索效果的特殊指令，可以让搜索结果更加准确、快速、精准。但需要注意的是，不同搜索引擎可能支持的指令有所不同，具体可以上官方文档查询。而且目前很多浏览器插件都自带这些命令功能，用途不是很广泛。</p><h2 id="1-site"><a href="#1-site" class="headerlink" title="1. site"></a>1. site</h2><p><code>site</code> 用途是搜索某个域名下的所有文件，可以帮助我们快速找到特定网站内的信息。</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，site:wikipedia.org   将会在维基百科网站内搜索相关内容。</li></ul><h2 id="2-filetype"><a href="#2-filetype" class="headerlink" title="2. filetype"></a>2. filetype</h2><p><code>filetype</code> 用途是搜索特定文件格式，可以帮助我们快速找到特定格式的文档、图片、音频等文件。基本格式为filetype:文件格式 文件名称</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，filetype:pdf “data mining”   将会在PDF文件中搜索关于数据挖掘的相关内容。</li></ul><h2 id="3-intitle"><a href="#3-intitle" class="headerlink" title="3. intitle"></a>3. intitle</h2><p><code>intitle</code> 用途是搜索页面标题包含某个关键词的页面，可以帮助我们快速找到特定主题的页面。</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，intitle:”Python tutorial”   将会在页面标题中搜索Python教程相关的内容。</li></ul><h2 id="4-inurl"><a href="#4-inurl" class="headerlink" title="4. inurl"></a>4. inurl</h2><p><code>inurl</code> 用途是搜索<strong>查询词</strong>出现在URL地址中的页面，可以帮助我们快速找到特定主题的页面。</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，inurl:”data analysis”   将会在URL地址中搜索与数据分析相关的内容。</li></ul><p>由于关键词(我们想要的查询词)出现在url 中对排名有一定影响，使用inurl:搜索可以更准确地找到目标。</p><ul><li>例如：site:github.com inurl:jijunhao  返回的结果是github.com这个域名下，包含jijunhao的url，前提是得被收录</li></ul><h2 id="5-intext"><a href="#5-intext" class="headerlink" title="5. intext"></a>5. intext</h2><p><code>intext</code> 用途是搜索页面正文中包含某个关键词的页面，可以帮助我们快速找到包含特定信息的页面。</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，intext:”machine learning”   将会在页面正文中搜索与机器学习相关的内容。</li></ul><h2 id="6-allinurl"><a href="#6-allinurl" class="headerlink" title="6. allinurl"></a>6. allinurl</h2><p><code>allinurl</code> 用途是同时搜索多个关键词出现在URL地址中的页面，可以帮助我们快速找到包含多个关键词的页面。</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，allinurl:”data analysis” tutorial   将会在URL地址中搜索同时包含数据分析和教程的页面。</li></ul><h2 id="7-allintitle"><a href="#7-allintitle" class="headerlink" title="7.allintitle"></a>7.allintitle</h2><p><code>allintitle</code> 用途是同时搜索多个关键词出现在页面标题中的页面，可以帮助我们快速找到包含多个关键词的页面。</p><p>支持的搜索引擎有Google、Bing、Yahoo等。</p><ul><li>例如，allintitle:”Python tutorial” beginner   将会在页面标题中搜索同时包含Python教程和初学者的页面。</li></ul><h2 id="8-related"><a href="#8-related" class="headerlink" title="8. related"></a>8. related</h2><p><code>related</code> 用途是搜索与特定网站相关的其他网站，可以帮助我们快速找到与特定网站类似的其他网站。</p><p>支持的搜索引擎有Google。</p><ul><li>例如，related:wikipedia.org   将会搜索与维基百科相关的其他网站。</li></ul><h2 id="9-减号"><a href="#9-减号" class="headerlink" title="9. (-)减号"></a>9. (-)减号</h2><p>减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必需是空格，减号后面没有空格，紧跟着需求排除的词，baidu和Google 均支持该指令。</p><ul><li>例如，系统升级 -广告</li></ul><p>返回排除了广告后的系统升级内容。这是最简单的去除广告的方式。</p><h2 id="10-“…”-双引号"><a href="#10-“…”-双引号" class="headerlink" title="10. (“…”)双引号"></a>10. (“…”)双引号</h2><p>用双引号包住搜索词，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。百度和Google 都支持这个指令。</p><ul><li>例如，”假设A、B两地距离为5km”</li></ul><h2 id="11-星号"><a href="#11-星号" class="headerlink" title="11. (*)星号"></a>11. (*)星号</h2><p>星号是常用的通配符，也能够用在搜索中，百度不支持星号搜索指令。</p><ul><li>例如，统计*理论</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用解压与压缩命令</title>
      <link href="/2023/02/07/article20230207/"/>
      <url>/2023/02/07/article20230207/</url>
      
        <content type="html"><![CDATA[<h3 id="tar-文件"><a href="#tar-文件" class="headerlink" title=".tar 文件"></a>.tar 文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 仅打包，并非压缩</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> FileName.tar         <span class="token comment"># 解包</span><span class="token function">tar</span> <span class="token parameter variable">-cvf</span> FileName.tar DirName <span class="token comment"># 将DirName和其下所有文件（夹）打包123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="gz文件"><a href="#gz文件" class="headerlink" title=".gz文件"></a>.gz文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .gz</span>gunzip FileName.gz  <span class="token comment"># 解压1</span><span class="token function">gzip</span> <span class="token parameter variable">-d</span> FileName.gz <span class="token comment"># 解压2</span><span class="token function">gzip</span> FileName       <span class="token comment"># 压缩，只能压缩文件1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tar-gz文件、-tgz文件"><a href="#tar-gz文件、-tgz文件" class="headerlink" title=".tar.gz文件、 .tgz文件"></a>.tar.gz文件、 .tgz文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .tar.gz 和 .tgz</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> FileName.tar.gz               <span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> FileName.tar.gz DirName       <span class="token comment"># 将DirName和其下所有文件（夹）压缩</span><span class="token function">tar</span> <span class="token parameter variable">-C</span> DesDirName <span class="token parameter variable">-zxvf</span> FileName.tar.gz <span class="token comment"># 解压到目标路径1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="zip文件"><a href="#zip文件" class="headerlink" title=".zip文件"></a>.zip文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 感觉.zip占用空间比.tar.gz大</span><span class="token function">unzip</span> FileName.zip          <span class="token comment"># 解压</span><span class="token function">zip</span> FileName.zip DirName    <span class="token comment"># 将DirName本身压缩</span><span class="token function">zip</span> <span class="token parameter variable">-r</span> FileName.zip DirName <span class="token comment"># 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rar文件"><a href="#rar文件" class="headerlink" title=".rar文件"></a>.rar文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># macOS和linux并没有自带rar，需要去下载</span><span class="token function">unrar</span> x FileName.rar      <span class="token comment"># 解压</span><span class="token function">rar</span> a FileName.rar DirName <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7z文件"><a href="#7z文件" class="headerlink" title=".7z文件"></a>.7z文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">7z x filename.7z           <span class="token comment"># 解压</span>7z a filename.7z DirName   <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装rar命令："><a href="#安装rar命令：" class="headerlink" title="安装rar命令："></a>安装rar命令：</h3><ul><li>Debian/Ubuntu系统：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">rar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>CentOS/RHEL系统：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">rar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装7z命令："><a href="#安装7z命令：" class="headerlink" title="安装7z命令："></a>安装7z命令：</h3><ul><li>Debian/Ubuntu系统：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> p7zip-full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>CentOS/RHEL系统：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> p7zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip介绍及常用命令</title>
      <link href="/2023/02/06/article20230206/"/>
      <url>/2023/02/06/article20230206/</url>
      
        <content type="html"><![CDATA[<h2 id="pip-简介"><a href="#pip-简介" class="headerlink" title="pip 简介"></a>pip 简介</h2><p>pip是Python官方的包管理器，可以方便地安装、升级和卸载Python包。</p><h2 id="pip-常用命令"><a href="#pip-常用命令" class="headerlink" title="pip 常用命令"></a>pip 常用命令</h2><ol><li>显示版本和路径</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>获取帮助</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token parameter variable">--help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>升级pip和升级包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip   <span class="token comment"># Linux/macOS </span>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> pip          <span class="token comment"># windows</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>  <span class="token comment"># 其中&lt;package&gt;是要升级的包名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>列出所有pip包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>安装包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>     <span class="token comment"># 其中&lt;package&gt;是要安装的包名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>卸载包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>    <span class="token comment"># 其中&lt;package&gt;是要卸载的包名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>搜索包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip search <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>      <span class="token comment"># 其中&lt;package&gt;是要搜索的包名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>导出已安装的包列表</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip freeze <span class="token operator">&gt;</span> requirements.txt   <span class="token comment"># 将环境中已安装的包保存到requirements.txt文件中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装 pip install -r requirements.txt</p></blockquote><h2 id="pip-换源"><a href="#pip-换源" class="headerlink" title="pip 换源"></a>pip 换源</h2><blockquote><p>pip 的源配置文件在不同操作系统下的位置可能会有所不同。</p><ul><li>Windows 系统下，pip 的配置文件默认存储在 <code>C:\Users\用户名\AppData\Roaming\pip\pip.ini</code> 目录下，其中用户名是你的 Windows 用户名。如果该文件不存在，则需要手动创建一个。</li><li>Linux 系统下，pip 的配置文件默认存储在 <code>~/.config/pip/pip.conf</code> 文件中。如果该文件不存在，则需要手动创建一个。</li><li>macOS 系统下，pip 的配置文件默认存储在 <code>~/Library/Application Support/pip/pip.conf</code> 文件中。如果该文件不存在，则需要手动创建一个。</li></ul></blockquote><ol><li>全局源(清华源)</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>临时源</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>其他源</li></ol><p>中科大: <a href="https://pypi.mirrors.ustc.edu.cn/simple">https://pypi.mirrors.ustc.edu.cn/simple</a></p><p>阿里源：<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></p><p>豆瓣源 ：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p>腾讯源：<a href="http://mirrors.cloud.tencent.com/pypi/simple">http://mirrors.cloud.tencent.com/pypi/simple</a> </p><blockquote><p>**注意https和http，http的需要信任(因为未加密)**，可以通过下面两个方法解决</p></blockquote><ul><li>安装时加入 <code>--trusted-host</code> 临时参数</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com【package-name】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 <code>pip.conf</code> 中加入 <code>trusted-host</code> 选项，该方法是一劳永逸</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pip-缓存位置"><a href="#pip-缓存位置" class="headerlink" title="pip 缓存位置"></a>pip 缓存位置</h2><blockquote><p>每次pip都会下载一些包，不会自动删除，手动删除即可</p></blockquote><p>pip 的缓存位置在不同的操作系统下会有所不同：</p><ul><li>Windows: 缓存位置为 <code>%APPDATA%\pip\cache</code>。其中，<code>%APPDATA%</code> 为当前用户的应用程序数据目录，通常位于 <code>C:\Users\{用户名}\AppData\Roaming</code>。</li><li>macOS/Linux: 缓存位置为 <code>~/.cache/pip</code>。</li></ul><p>可以通过以下命令查看 pip 的配置信息，包括缓存位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果需要修改缓存位置，可以在 pip 的配置文件中进行设置。Windows 上的配置文件为 <code>%APPDATA%\pip\pip.ini</code> 或 <code>%APPDATA%\pip\pip.conf</code>，macOS/Linux 上的配置文件为 <code>~/.config/pip/pip.conf</code>。在配置文件中添加以下内容即可修改缓存位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>cache-dir <span class="token operator">=</span> /path/to/cache/dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 <code>/path/to/cache/dir</code> 替换为你希望设置的缓存路径。修改完成后，重启终端或者重新加载 pip 配置即可生效。</p><h2 id="安装时间超时问题"><a href="#安装时间超时问题" class="headerlink" title="安装时间超时问题"></a>安装时间超时问题</h2><p>pip的超时时间默认为15秒，如果下载速度过慢，可以使用以下命令设置超时时间为60秒：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> --default-timeout<span class="token operator">=</span><span class="token number">60</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>添加参数<code>--default-timeout=1000</code></li><li>在配置里面<code>[global]</code>下添加<code>timeout=1000</code></li></ol><h2 id="虚拟环境多python版本问题"><a href="#虚拟环境多python版本问题" class="headerlink" title="虚拟环境多python版本问题"></a>虚拟环境多python版本问题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miniconda的安装和使用</title>
      <link href="/2023/02/05/article20230205/"/>
      <url>/2023/02/05/article20230205/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>参考文献</strong></p><p><a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a>  <a href="https://www.anaconda.com/">Anaconda</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Miniconda</code>和<code>Anaconda</code>都是Python环境管理工具，可以用于创建、管理和部署Python环境及其依赖的软件包。它们的主要区别在于其默认安装的软件包和所需空间的大小。</p><ul><li><p>Miniconda 是一个轻量级的Python环境管理工具，仅包括conda、Python及其所需的基本依赖库。因此，它的安装包大小较小，只有几十兆，相比于Anaconda更加灵活。用户可以根据自己的需要逐步安装所需的软件包，避免不必要的浪费。在需要安装新软件包时，可以使用conda install命令来安装所需的软件包。这使得Miniconda在轻量化、快速安装、定制化、跨平台方面具有优势。</p></li><li><p>Anaconda 是一个包含了数百个预安装软件包的Python环境管理工具，包括Python解释器、各种科学计算和数据分析库、可视化工具、深度学习框架等。Anaconda旨在为数据科学家和研究者提供一个完整的数据科学环境，可以直接安装并使用大量的数据科学工具。这也意味着，Anaconda的安装包非常大，通常需要几个GB的磁盘空间，安装所需的时间也较长。同时，由于默认安装了大量的软件包，如果不需要的话，可能会浪费磁盘空间和内存资源。</p></li></ul><p>综上所述，如果您需要一个灵活、快速、定制化的Python环境管理工具，并且希望自己安装所需的软件包，那么Miniconda可能更适合您。如果您需要一个预装有大量数据科学工具的环境，那么Anaconda可能更适合您。两者安装步骤几乎一致。</p><h2 id="1-安装-Miniconda"><a href="#1-安装-Miniconda" class="headerlink" title="1. 安装 Miniconda"></a>1. 安装 Miniconda</h2><h3 id="1-1-Windows下安装"><a href="#1-1-Windows下安装" class="headerlink" title="1.1 Windows下安装"></a>1.1 Windows下安装</h3><p>在 Windows 系统下安装 Miniconda，可以按照以下步骤进行：</p><ul><li><p>首先，从官网下载适合你 Windows 系统的 Miniconda 安装程序：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，双击安装程序并按照提示进行安装。</p></li><li><p>安装过程中需要阅读并同意许可协议。</p></li><li><p>安装过程中需要选择 Miniconda 的安装路径。默认情况下是在 <code>C:\Users\&lt;username&gt;\Miniconda3</code> 目录下创建一个名为 <code>Miniconda3</code> 的目录。你也可以选择其他路径，根据提示进行选择。</p></li></ul><p>安装完成后，你就可以在终端中使用 conda 命令了，创建环境，安装依赖等操作都可以使用 conda 命令完成。</p><h3 id="1-2-macOS下安装"><a href="#1-2-macOS下安装" class="headerlink" title="1.2 macOS下安装"></a>1.2 macOS下安装</h3><p>在 macOS 系统下安装 Miniconda，可以按照以下步骤进行：</p><ul><li><p>首先，从官网下载适合你 macOS 系统的 Miniconda 安装程序：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，双击安装程序并按照提示进行安装。</p></li><li><p>安装过程中需要阅读并同意许可协议。</p></li><li><p>安装过程中需要选择 Miniconda 的安装路径。默认情况下是在用户目录下创建一个名为 <code>miniconda3</code> 的目录。你也可以选择其他路径，根据提示进行选择。</p></li><li><p>安装完成后，需要在终端中运行以下命令，以便 Miniconda 的环境变量生效：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，你就可以在终端中使用 conda 命令了，创建环境，安装依赖等操作都可以使用 conda 命令完成。</p><h3 id="1-3-Linux下安装"><a href="#1-3-Linux下安装" class="headerlink" title="1.3 Linux下安装"></a>1.3 Linux下安装</h3><p>在 Linux 下安装 Miniconda，可以按照以下步骤进行：</p><ul><li><p>首先，从官网下载适合你 Linux 系统的 Miniconda 安装程序：<a href="https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>打开终端，进入下载目录，执行以下命令，安装 Miniconda：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意</strong>：如果你下载的是不同版本的安装程序，文件名也会有所不同，请根据你下载的版本自行更改文件名。</p></blockquote><ul><li><p>执行安装命令后，会出现 Miniconda 许可协议的信息，按照提示阅读并同意协议，即输入<code>accept</code></p></li><li><p>接下来会提示你选择安装路径，默认情况下是在用户目录下创建一个名为 <code>miniconda3</code> 的目录。你也可以选择其他路径，根据提示进行选择。</p></li><li><p>安装完成后，终端中会出现提示，说明 Miniconda 已经安装成功。需要重新打开终端，以便 Miniconda 的环境变量生效。</p></li></ul><p>安装完成后，你就可以在终端中使用 conda 命令了，创建环境，安装依赖等操作都可以使用 conda 命令完成。</p><h2 id="2-配置-Miniconda"><a href="#2-配置-Miniconda" class="headerlink" title="2. 配置 Miniconda"></a>2. 配置 Miniconda</h2><ul><li><p>打开终端或 Anaconda Prompt（Windows 用户）。</p></li><li><p>创建并激活 conda 环境：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">--name</span> env_nameconda activate env_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的 <code>env_name</code> 是你想要创建的环境名称。</p><ul><li>安装所需的包和工具：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 package_name 是你想要安装的包名称。</p><ul><li>可以通过修改 .condarc 文件来修改默认的 conda 配置。</li></ul><blockquote><p>conda 配置文件的路径:</p><ul><li><p>Linux/macOS: <code>~/.condarc</code> 或 <code>$HOME/.condarc</code></p></li><li><p>Windows: <code>USERPROFILE%.condarc</code> 或 <code>C:\Users\username.condarc</code></p></li></ul><p>其中，<code>%USERPROFILE%</code> 为 Windows 系统环境变量，表示当前用户的主目录路径，<code>username</code> 为当前用户名。</p></blockquote><h2 id="3-常用的-conda-命令"><a href="#3-常用的-conda-命令" class="headerlink" title="3. 常用的 conda 命令"></a>3. 常用的 conda 命令</h2><p>conda 是一个用于包管理和环境管理的工具，可以方便地创建、安装、升级和删除不同的软件包和其依赖项。以下是一些常用的 conda 命令：</p><ul><li>创建一个新的环境：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">--name</span> env_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>env_name</code> 为你想要创建的环境名称。</p><ul><li>激活一个环境：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate env_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>env_name</code> 为你想要激活的环境名称。</p><ul><li>在激活的环境中安装一个软件包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>package_name</code> 为你想要安装的软件包名称。</p><ul><li>列出当前环境中安装的所有软件包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列出所有可用的环境：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更新 conda：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更新所有已安装的软件包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>从环境中删除一个软件包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove package_nameconda remove <span class="token parameter variable">-n</span> env_name package_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>package_name</code> 为你想要删除的软件包名称。</p><ul><li>退出环境</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除一个环境</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">-n</span> env_name <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>conda清理缓存</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda clean <span class="token parameter variable">-p</span>        <span class="token comment"># 删除没有用的包</span>conda clean <span class="token parameter variable">-t</span>        <span class="token comment"># 删除tar包</span>conda clean <span class="token parameter variable">-y</span> <span class="token parameter variable">--all</span>  <span class="token comment"># 删除所有的安装包及cache</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>自动开启和关闭</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">false</span>  <span class="token comment"># 关闭自动激活状态</span>conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">true</span>   <span class="token comment"># 关开启自动激活状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>复制一个环境</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">--name</span> new <span class="token parameter variable">--clone</span> old<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在使用conda创建虚拟环境时，默认会将虚拟环境的文件夹放在Anaconda/Miniconda的安装路径下的envs文件夹中，具体路径为：</p><ul><li>Windows系统下：C:\Anaconda3\envs 或 C:\Users\你的用户名\Anaconda3\envs</li><li>Linux/Mac系统下：/home/你的用户名/anaconda3/envs 或 /Users/你的用户名/anaconda3/envs</li></ul></blockquote><p>当然，你也可以使用conda config命令更改默认路径，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--add</span> envs_dirs /path/to/new/envs/folder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会在新路径下创建一个名为envs的文件夹，用来存储所有的虚拟环境。</p><h2 id="4-conda-换源"><a href="#4-conda-换源" class="headerlink" title="4. conda 换源"></a>4. conda 换源</h2><p>如果你在使用 conda 时遇到网络问题，可以将 conda 的源换成清华源（<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/%EF%BC%89%E3%80%82%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/）。具体步骤如下：</a></p><ul><li><p>打开终端或 Anaconda Prompt。</p></li><li><p>在命令提示符中输入以下命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--show</span> <span class="token comment"># 显示当前 conda 配置</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ <span class="token comment"># 添加清华源的免费仓库</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ <span class="token comment"># 添加清华源的主要仓库</span>conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span> <span class="token comment"># 显示添加的所有仓库地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这会将清华源添加到你的 conda 配置文件中。</p><ul><li><p>执行 <code>conda update conda</code> 命令，以确保你的 conda 版本是最新的。</p></li><li><p>如果你要创建新的环境或安装新的软件包，请使用以下命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">--name</span> env_name package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>env_name</code> 为你想要创建的环境名称，<code>package_name</code> 为你想要安装的软件包名称。</p><blockquote><p>例如：<code>conda create -n pytorch python==3.8</code> 创建一个 pytorch 环境，pythoon 版本为3.8</p></blockquote><ul><li>如果你需要取消这些换源更改，可以使用以下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --remove-key channels <span class="token comment"># 移除添加的仓库地址</span>conda config <span class="token parameter variable">--set</span> show_channel_urls no <span class="token comment"># 不再显示仓库地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了清华源之外，还有不少其他的 conda 镜像源可以使用。以下是一些常用的 conda 镜像源及其地址：</p><ul><li>中科大镜像源：<a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/main/">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</a></li><li>阿里云镜像源：<a href="https://mirrors.aliyun.com/anaconda/pkgs/main/">https://mirrors.aliyun.com/anaconda/pkgs/main/</a></li><li>华为云镜像源：<a href="https://mirrors.huaweicloud.com/repository/anaconda/pkgs/main/">https://mirrors.huaweicloud.com/repository/anaconda/pkgs/main/</a></li><li>中国科学院开源协会镜像源：<a href="https://mirrors.opencas.cn/anaconda/pkgs/main/">https://mirrors.opencas.cn/anaconda/pkgs/main/</a></li><li>豆瓣镜像源：<a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></li></ul><p>如果你想切换到其他镜像源，可以使用类似于切换清华源的方法，将需要的镜像源地址添加到 conda 配置文件中。</p><blockquote><p>需要注意的是，不同的镜像源可能会有不同的速度和可靠性，建议根据自己的网络情况选择合适的镜像源。</p></blockquote><h2 id="5-导出环境"><a href="#5-导出环境" class="headerlink" title="5. 导出环境"></a>5. 导出环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">&gt;</span> environment.yamlconda <span class="token function">env</span> create <span class="token parameter variable">-f</span> environment.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>移植过来的环境只有原来环境里用conda install等命令直接安装的包，用pip之类装的东西没有移植过来，需要重新安装。</p></blockquote><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>使用 conda 时，需要注意以下几点：</p><ol><li><strong>环境隔离</strong>：conda 可以创建虚拟环境来隔离不同的 Python 包和版本。在使用 conda 安装包时，需要确保安装在正确的环境中，以免出现冲突或版本不兼容的问题。可以使用 <code>conda env list</code> 查看当前存在的环境，使用 <code>conda activate env_name</code> 激活指定的环境。</li><li><strong>版本管理</strong>：conda 可以安装不同版本的 Python 包和库，并且可以轻松地切换不同版本之间。在安装新包或更新已有包时，需要注意是否与当前环境中的其他包兼容。可以使用 <code>conda search package_name</code> 命令查询指定包的可用版本，使用 <code>conda install package_name=version</code> 命令安装指定版本的包。</li><li><strong>包管理</strong>：conda 不仅可以安装 Python 包和库，还可以安装其他语言的依赖库和系统工具。在使用 conda 安装包时，需要注意包的来源和可靠性，以免下载和安装恶意软件。可以使用官方的 conda-forge 渠道来安装社区维护的包，也可以使用其他可信的镜像源。</li><li><strong>配置管理</strong>：conda 可以通过配置文件来管理镜像源、默认安装路径、自动激活环境等设置。在使用 conda 时，需要注意配置文件是否正确，以免出现安装失败或异常的问题。可以使用 <code>conda config --show</code> 命令查看当前的配置信息，使用 <code>conda config --set key=value</code> 命令修改指定的配置项。</li></ol><p>总之，在使用 conda 时，需要仔细阅读文档，遵循最佳实践，以免出现不必要的问题。以上就是一些常用的 conda 小技巧。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery主题评论插件</title>
      <link href="/2023/01/01/article20230101/"/>
      <url>/2023/01/01/article20230101/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>参考链接</strong></p><p><a href="https://liukgg.github.io/2021/08/15/hexo/hexo-zai-matery-zhu-ti-xia-ji-cheng-utteranc-ping-lun-cha-jian/">LuckLiu</a></p><p><a href="https://utteranc.es/">utteranc</a></p></blockquote><h2 id="Hexo-Matery主题评论插件"><a href="#Hexo-Matery主题评论插件" class="headerlink" title="Hexo-Matery主题评论插件"></a>Hexo-Matery主题评论插件</h2><p><code>matery</code>主题集成了各种评论模块，例如 <strong>gitalk</strong>、<strong>gitment</strong>、<strong>disqus</strong>、<strong>livere</strong>、<strong>valine</strong>、<strong>waline</strong>、<strong>Twikoo</strong>、<strong>utteranc</strong> 等，但我使用最好的还是 <code>utteranc</code> 这种集成在github种的评论插件，并且能够做到github邮箱通知。</p><h3 id="1-新建一个评论仓库"><a href="#1-新建一个评论仓库" class="headerlink" title="1. 新建一个评论仓库"></a>1. 新建一个评论仓库</h3><p>首先创建一个公开的评论仓库&lt;自定义名称&gt;<strong>！注意一定要公开，否则别人无法评论</strong></p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940745.png" style="zoom:80%;"><h3 id="2-安装utterances"><a href="#2-安装utterances" class="headerlink" title="2. 安装utterances"></a>2. 安装utterances</h3><ul><li>进入<a href="https://github.com/apps/utterances">utterances</a>，点击 <code>install</code></li></ul><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940868.png" style="zoom: 67%;"><ul><li>选择刚刚创建的自定义评论仓库，点击<code>install</code></li></ul><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940318.png" style="zoom:80%;"><h3 id="3-配置评论风格configuration"><a href="#3-配置评论风格configuration" class="headerlink" title="3. 配置评论风格configuration"></a>3. 配置评论风格configuration</h3><ul><li>首先输入自己的刚刚新建的评论仓库</li></ul><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940744.png" style="zoom:80%;"><ul><li>其他按照自己的需要挑战，把最后生成的配置，<code>copy</code> 下来</li></ul><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202303111940722.png" style="zoom:80%;"><h3 id="4-添加配置到matery主题"><a href="#4-添加配置到matery主题" class="headerlink" title="4. 添加配置到matery主题"></a>4. 添加配置到matery主题</h3><ul><li>修改matery主题的配置文件 <code>themes/hexo-theme-matery/_config.yml</code> ，开启utteranc功能</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># utteranc config, default disabled</span><span class="token comment"># utteranc 评论模块的配置，默认为不激活</span><span class="token key atrule">utteranc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改博客文章 <code>themes/hexo-theme-matery/layout/_partial/post-detail.ejs</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>utteranc <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>utteranc<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/utteranc'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该处改动的目的是为了在所有博客文章中统一在底部加入一个评论模块，这个改动很关键、所放位置也很重要。</p><ul><li>新增一个文件 <code>themes/hexo-theme-matery/layout/_partial/utteranc.ejs</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"utteranc-container"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://utteranc.es/client.js"</span>                repo<span class="token operator">=</span><span class="token string">"jijunhao/utterances"</span>                issue<span class="token operator">-</span>term<span class="token operator">=</span><span class="token string">"pathname"</span>                theme<span class="token operator">=</span><span class="token string">"github-light"</span>                crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span>                async<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的留言都会出现在自定义评论仓库 <code>issues</code> 的，并且会每次给邮箱发消息。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果博客中还有单独的一个留言板模块，需要改 <code>themes/hexo-theme-matery/layout/contact.ejs</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>utteranc <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>utteranc<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/utteranc'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后重启hexo，就能在网页拥有评论功能了。</p><p>如有问题，欢迎在我以上的博客留言板中留言交流。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计机器学习</title>
      <link href="/2022/12/09/article20221209/"/>
      <url>/2022/12/09/article20221209/</url>
      
        <content type="html"><![CDATA[<h2 id="学习的类型"><a href="#学习的类型" class="headerlink" title="学习的类型"></a>学习的类型</h2><h3 id="1-监督学习（supervised-learning）"><a href="#1-监督学习（supervised-learning）" class="headerlink" title="1. 监督学习（supervised learning）"></a>1. 监督学习（supervised learning）</h3><p>监督学习可以被视为一种学生学习的过程，即向导师提问并回答。在机器学习情境中，学生对应于计算机，导师对应于计算机的用户;计算机从问与答的成对样本中学习一种从问题到其答案的映射。</p><p>监督学习的目标在于获得 <strong>泛化能力(generalization ability)</strong> ：一种能够为从未被学习过的问题猜出恰当答案的能力。</p><p>监督学习的典型任务：</p><ul><li><strong>回归(regression)</strong> ，当答案是一个实数值(如:温度)</li><li><strong>分类(classification)</strong> ，如果答案是一个分类值(如:“是”或“否”)</li><li><strong>排序(ranking)</strong> ，如果答案是一个数列值(如:“好”“中”或“劣”)</li></ul><h3 id="2-非监督学习（unsupervised-learning）"><a href="#2-非监督学习（unsupervised-learning）" class="headerlink" title="2. 非监督学习（unsupervised learning）"></a>2. 非监督学习（unsupervised learning）</h3><p>非监督学习被认为是，导师不存在并且学生自学。在机器学习情境中，计算机通过互联网自动地收集数据并且尝试在没有用户任何指导下抽取有用的知识。因此，非监督学习比监督学习更加自动化，尽管其目标不一定指定清楚。</p><p>非监督学习的典型任务：</p><ul><li><strong>聚类(data clustering)</strong></li><li><strong>异常点检测(outlier detection)</strong></li><li><strong>变化检测(change detection)</strong></li></ul><h3 id="3-强化学习（reinforcement-learning）"><a href="#3-强化学习（reinforcement-learning）" class="headerlink" title="3. 强化学习（reinforcement learning）"></a>3. 强化学习（reinforcement learning）</h3><p>强化学习与监督学习类似，也是以使计算机获得对没有学习过的问题做出正确解答的泛化能力为目标，但是在学习过程中，不设置导师提示对错、告知最终答案的环节。相反，导师评价(evaluate)学生的行为并给予其反馈。强化学习的目标是基于来自导师的反馈，使得学生提高其行为，从而最大化导师的评价。</p><h3 id="4-高级主题"><a href="#4-高级主题" class="headerlink" title="4. 高级主题"></a>4. 高级主题</h3><ul><li><strong>半监督学习(semi-supervised learning)</strong></li><li><strong>集成学习(ensemble learning)</strong></li><li><strong>矩阵学习(matrix learning)、张量学习(tensor learning)</strong></li><li><strong>在线学习(online learning)</strong></li><li><strong>迁移学习(transfer learning)</strong></li><li><strong>降维(dimensionality reduction)</strong></li></ul><h3 id="5-其他热点"><a href="#5-其他热点" class="headerlink" title="5. 其他热点"></a>5. 其他热点</h3><ul><li><strong>关联规则挖掘</strong></li><li><strong>概率图模型</strong></li><li><strong>深度学习</strong></li><li><strong>图、视频、文本、音频、网络的分析</strong></li><li><strong>分布式计算</strong></li></ul><h2 id="两种学习模型：判别式模型和生成式模型"><a href="#两种学习模型：判别式模型和生成式模型" class="headerlink" title="两种学习模型：判别式模型和生成式模型"></a>两种学习模型：判别式模型和生成式模型</h2><h3 id="监督学习：分类、回归、标记"><a href="#监督学习：分类、回归、标记" class="headerlink" title="监督学习：分类、回归、标记"></a>监督学习：分类、回归、标记</h3><ul><li>概率方式<ul><li>判别式模型：直接对 $p(y|x)$ 建模或者学习 $y=f(x)$<ul><li><strong>逻辑回归(Logistic Regression)</strong></li><li><strong>条件随机场(Conditional Random Field，CRF)</strong></li></ul></li><li>生成式模型：学习联合概率分布 $p(x,y)$<ul><li><strong>朴素贝叶斯(Naive Bayesian Algorithm)</strong></li></ul></li></ul></li><li>非概率方式<ul><li><strong>线性回归(Linear Regression)/岭回归/LASSO</strong></li><li><strong>样条回归(Spline Regression)</strong></li><li><strong>支持向量机(Support Vector Machine，SVM)</strong> ：基于间隔</li><li><strong>K近邻(K-Nearest Neighbor，KNN)</strong> ：基于距离</li><li><strong>决策树(Decision Tree)</strong> ：基于树的节点</li></ul></li></ul><h3 id="非监督学习：降维、聚类、特征学习、概率密度估计（生成数据）"><a href="#非监督学习：降维、聚类、特征学习、概率密度估计（生成数据）" class="headerlink" title="非监督学习：降维、聚类、特征学习、概率密度估计（生成数据）"></a>非监督学习：降维、聚类、特征学习、概率密度估计（生成数据）</h3><ul><li>概率方式<ul><li>生成模型：直接对 $p(x)$ 建模<ul><li><strong>高斯混合模型(Gaussian Mixture Model，GMM)</strong></li><li><strong>隐马尔可夫模型(Hidden Markov Model，HMM)</strong></li><li><strong>因子分析(Factor Analysis，FA)</strong></li><li><strong>概率主成分分析(Probabilistic Principal Component Analysis，P-PCA)</strong></li><li><strong>概率潜在语义分析(Probabilistic Latent Semantic Analysis，P-LSA)</strong></li><li><strong>潜在狄利克雷分布 (Latent Dirichlet Allocation，LDA)</strong></li></ul></li><li>深度生成模型：利用神经网络来建模 $p(x|z;\theta)$，并不对分布本身进行建模，而是建模生成过程<ul><li><strong>玻尔兹曼机(Boltzmann machine)/受限玻尔兹曼机(Restricted Boltzmann Machines，RBM)</strong></li><li><strong>深度信念网络(DeepBelief Network，DBN）</strong></li><li><strong>变分自编码器(Variational Auto-Encoders，VAE)</strong></li><li><strong>生成随机网络(Generative Stochastic Network，GSN)</strong></li><li><strong>生成对抗网络(Generative Adversarial Network，GAN)</strong></li></ul></li></ul></li><li>非概率方式<ul><li><strong>主成分分析(Principal Component Analysis，PCA)/核主成分分析(Kernel Principal Component Analysis，KPCA)</strong></li><li><strong>线性判别分析(Linear Discriminant Analysis，LDA)</strong></li><li><strong>多维尺度变换(Multi-dimensional Scaling，MDS)</strong></li><li><strong>局部线性嵌入(Locally Linear Embedding，LLE)</strong></li><li><strong>自编码器(Auto-Encoder)/降噪自编码器(Denoising Auto-Encoder，DAE)</strong></li><li><strong>K-均值(K-means)</strong></li><li><strong>层次聚类(Hierarchical clustering)</strong></li><li><strong>谱聚类(Spectral clustering)</strong></li><li><strong>潜在语义分析((Latent Semantic Analysis，LSA)</strong></li></ul></li></ul><h2 id="正则化（约束）方法"><a href="#正则化（约束）方法" class="headerlink" title="正则化（约束）方法"></a>正则化（约束）方法</h2><ul><li><strong>$l_1$约束</strong></li><li><strong>$l_2$约束</strong></li><li><strong>$l_1+l_2$约束</strong></li><li><strong>$l_{1,2}$约束</strong></li><li><strong>迹范数约束</strong></li></ul><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><ul><li><p>回归</p><ul><li><strong>$l_2$损失(平方差损失)</strong></li><li><strong>$l_1$损失</strong></li><li><strong>Huber损失</strong></li><li><strong>Tukey损失</strong></li></ul></li><li><p>分类</p><ul><li><p><strong>0/1损失</strong></p></li><li><p><strong>指数损失</strong></p></li><li><p><strong>Hinge损失</strong></p></li><li><p><strong>Ramp损失</strong></p></li><li><p><strong>交叉熵损失函数</strong></p></li></ul></li></ul><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><ul><li><p>回归</p><ul><li><p><strong>均方误差(Mean Squared Error，MSE)</strong></p></li><li><p><strong>均方根误差(Root Mean Square Error，RMSE)</strong></p></li><li><p><strong>平方绝对误差(Mean Absolute Error，MAE)</strong></p></li></ul></li><li><p>分类</p><ul><li><p><strong>混淆矩阵(Confusion Matrix)</strong></p><p><strong>真正样本(True Positive,TP)</strong> : 样本真实类别是正向的,模型预测的类别也是正向的<br><strong>真负样本(True Negative,TN)</strong> : 样本真实类别是负向的,模型预测的类别也是负向的<br><strong>假正样本(False Positive,FP)</strong> : 样本真实类别是负向的,模型预测的类别是正向的<br><strong>假负样本(False Negative,FN)</strong> : 样本真实类别是正向的,模型预测的类别是负向的</p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202212092205760.png" style="zoom: 50%;"></li><li><p><strong>正确率(accuracy)</strong><br>$$<br>Accuracy=\frac{TP +TN}{TN+FN +FP +TP}<br>$$</p></li><li><p><strong>精准率(Precision)</strong><br>$$<br>Precision=\frac{TP}{TP+FP}<br>$$</p></li><li><p><strong>召回率(Recall)</strong><br>$$<br>Recall=\frac{TP}{TP+FN}<br>$$</p></li><li><p><strong>特异度(Specificity)</strong><br>$$<br>Specificity=\frac{TN}{TN+FP}<br>$$</p></li><li><p><strong>F-值</strong><br>$$<br>F_{\beta}-Measure=\frac{(1+\beta^2)×Precision×Recall}{\beta^2×Precision+Recall}<br>$$</p><p>当$\beta=1$时候，即精准度和召回率一样重要的时候，公式如下：</p><p>$$<br>F_1−Measure=\frac{2}{\frac{1}{Precision}+\frac{1}{Recall}}=\frac{2×Precision×Recall}{Precision+Recall}<br>$$</p></li><li><p><strong>ROC曲线</strong></p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202212101124206.png" style="zoom:60%;"></li></ul></li><li><p>聚类</p><ul><li><strong>纯度(Purity)</strong></li><li><strong>Rand指数</strong></li><li><strong>互信息(Mutual Information)</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10+ubuntu双系统安装</title>
      <link href="/2022/10/05/article20221005/"/>
      <url>/2022/10/05/article20221005/</url>
      
        <content type="html"><![CDATA[<h2 id="安装win10-ubuntu双系统"><a href="#安装win10-ubuntu双系统" class="headerlink" title="安装win10 + ubuntu双系统"></a>安装win10 + ubuntu双系统</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><ol><li>一个4G以上的空U盘</li><li>确定自己电脑的类型<br>A 类: MBR的bios + 单硬盘<br>B 类: MBR的bios + 双硬盘（SSD固态 + 机械硬盘）<br>C 类: UEFI的bios + 单硬盘<br>D 类: UEFI的bios + 双硬盘（SSD固态 + 机械硬盘）</li><li>安装<a href="http://rufus.ie/zh/">rufus</a>，下载 <a href="https://cn.ubuntu.com/download">ubuntu</a> 的镜像</li></ol><h3 id="第一步：准备U盘"><a href="#第一步：准备U盘" class="headerlink" title="第一步：准备U盘"></a>第一步：准备U盘</h3><p>U盘最好是一个空U盘， 因为<strong>在安装过程中U盘会被格式化</strong></p><h3 id="第二步：查看电脑的信息"><a href="#第二步：查看电脑的信息" class="headerlink" title="第二步：查看电脑的信息"></a>第二步：查看电脑的信息</h3><h4 id="1-查看BIOS模式"><a href="#1-查看BIOS模式" class="headerlink" title="1. 查看BIOS模式"></a>1. 查看BIOS模式</h4><p><strong>win+r</strong>快捷键进入运行，输入<strong>msinfo32</strong>回车，出现以下界面，可查看BIOS模式：</p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318732.png"></p><p>BIOS模式有传统的MBR模式和新式UEFI模式，这将对安装双系统的方法产生直接影响。目前来看，大部分电脑都属于新式UEFI模式，不过也存在一些老机子仍然属于传统MBR模式。如果你的电脑属于传统MBR模式，强烈建议你重装windows系统来更新BIOS模式到UEFI。</p><h4 id="2-查看电脑的硬盘数和类型"><a href="#2-查看电脑的硬盘数和类型" class="headerlink" title="2. 查看电脑的硬盘数和类型"></a>2. 查看电脑的硬盘数和类型</h4><p><strong>此电脑</strong>点击右键，点击<strong>管理</strong>，点击<strong>磁盘管理</strong>：</p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318262.png"></p><p>要确定是安装在SSD还是机械硬盘上，还剩下多少空间。</p><h3 id="第三步：硬盘分区"><a href="#第三步：硬盘分区" class="headerlink" title="第三步：硬盘分区"></a>第三步：硬盘分区</h3><p>在想要分区的硬盘上压缩卷，最好超过50GB，我装在了机械硬盘上，选择了200GB，即204800MB<br><strong>！！注意不要新建卷，保持空白分区就好，即显示是黑条</strong></p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318532.png"></p><h3 id="第四步：用rufus写入ubuntu镜像"><a href="#第四步：用rufus写入ubuntu镜像" class="headerlink" title="第四步：用rufus写入ubuntu镜像"></a>第四步：用rufus写入ubuntu镜像</h3><ul><li><p>【设备】选择u盘（u盘会被格式化，最好用4G以上或者8G）</p></li><li><p>【引导类型选择】选择下载好的ubuntu*.iso</p></li><li><p>【分区类型】一般MBR，适合BIOS和UEFI安装</p></li><li><p>【卷标】是格式化之后的u盘名称</p></li><li><p>【文件系统】选择默认的FAT32，此文件格式适合4G以下的文件，且最大只支持4G</p></li><li><p>【簇大小】选择默认，表示最小单位文件大小</p><p>选择开始，之后耐心等待6-10分钟，直到显示<strong>绿色的准备就绪</strong>，点击关闭<br>期间可能需要联网，自动下载syslinux，选择<strong>是</strong>，并选择以iso镜像模式写入，选择<strong>是</strong></p></li></ul><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318060.jpg"></p><h3 id="第五步：安装"><a href="#第五步：安装" class="headerlink" title="第五步：安装"></a>第五步：安装</h3><h4 id="1-关机后开机，选择以U盘启动（U盘需一直插着）"><a href="#1-关机后开机，选择以U盘启动（U盘需一直插着）" class="headerlink" title="1. 关机后开机，选择以U盘启动（U盘需一直插着）"></a>1. 关机后开机，选择以U盘启动（U盘需一直插着）</h4><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>快捷键启动，以华硕系列为例，开机快速按ESC，即可进入快捷界面，选择刚制作的启动盘启动(UEFI)<br>  <img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318188.jpg"></p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>进入BIOS，以华硕系列为例，开机快速按F2，把右侧u盘移到至首位（下图为移动）<br>  <img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318837.jpg"></p><p><strong>！！ 注意两种方法都要禁用FAST boot，即disabled，f7配置，f10保存退出</strong><br>  <img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051318725.jpg"></p><h4 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h4><p>出现以下界面的原因：<strong>使用ubuntu20.04镜像</strong></p><p>解决方案：<strong>选择使用ubuntu18.04镜像</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GNU Grub Version <span class="token number">2.04</span>Minimal <span class="token environment constant">BASH</span>-like line editing is supported. For the first word, TAB lists possible <span class="token builtin class-name">command</span> completions. Anywhere <span class="token keyword">else</span> TAB lists possible device or <span class="token function">file</span> completions.grub<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-禁用显卡（如果有显卡的话，我是GTX1050显卡）"><a href="#2-禁用显卡（如果有显卡的话，我是GTX1050显卡）" class="headerlink" title="2. 禁用显卡（如果有显卡的话，我是GTX1050显卡）"></a>2. 禁用显卡（如果有显卡的话，我是GTX1050显卡）</h4><ul><li>选择第二个<strong>install ubuntu</strong>，按e进入<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051319606.jpg"></li><li>在 <strong>quiet</strong> 前面加入 <strong>nomodeset</strong>，按 <strong>f10</strong> ，开始安装<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051319845.jpg"></li></ul><h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h4><p>   仅给出几张关键的图</p><ul><li>默认字体（可以选择简体中文）<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320473.jpg"></li><li>安装选项（选择最下面的）<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320133.jpg"></li><li>安装位置（默认第一个）<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320444.jpg"></li></ul><h4 id="4-进入高级模式安装显卡"><a href="#4-进入高级模式安装显卡" class="headerlink" title="4. 进入高级模式安装显卡"></a>4. 进入高级模式安装显卡</h4><ul><li><p>安装结束后重启，进入高级选项<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320799.jpg"></p></li><li><p>进入<strong>recovery mode</strong><br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320181.jpg"></p></li><li><p>选择<strong>resume</strong>，第一个<br><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320652.jpg"></p></li><li><p>换源<br>找到softwore&amp;updates ，Downloads from选择other，找到china下的清华源,close</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> ubuntu-drivers autoinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202210051320260.jpg"></p><blockquote><p><strong>注意可能会内核更新，要等内核更新完毕才能安装显卡，否则会出现dpkg锁住</strong> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Matery主题使用和美化</title>
      <link href="/2022/09/26/article20220926/"/>
      <url>/2022/09/26/article20220926/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接</p><p><a href="https://hexo.io/zh-cn/index.html">Hexo 官网</a></p><p><a href="https://blog.csdn.net/tianjuewudi/article/details/112504019">个人建立 Hexo 博客 Matery 主题的过程心得|微笑小星</a></p><p><a href="https://blog.csdn.net/kuashijidexibao">Hexo-Matery 主题细致美化</a></p></blockquote><h2 id="Hexo-Matery主题美化"><a href="#Hexo-Matery主题美化" class="headerlink" title="Hexo-Matery主题美化"></a>Hexo-Matery主题美化</h2><h3 id="1-下载安装Matery主题"><a href="#1-下载安装Matery主题" class="headerlink" title="1. 下载安装Matery主题"></a>1. 下载安装Matery主题</h3><p>Matery主题是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，首先在<a href="https://hexo.io/themes/">hexo官网主题</a>里面搜索 <strong>Matery</strong> 主题，点击进入作者闪烁飞狐的 <a href="https://github.com/blinkfox/hexo-theme-matery">github</a>，在搜索结果的下面一点。</p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209252027854.png"></p><ul><li><p>可以下载 <code>master</code> 分支的最新稳定版的代码，解压缩后将 <code>hexo-theme-matery</code> 复制到Hexo 的 <code>themes</code> 文件夹中</p></li><li><p>也可以选择在<code>themes</code> 文件夹下使用<code>git clone</code>命令来下载：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-切换主题"><a href="#2-切换主题" class="headerlink" title="2. 切换主题"></a>2. 切换主题</h3><p>下载完后，将Hexo根目录下<code>_config.yml</code> 的 <code>theme</code> 的值修改为你下载主题的文件名。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span><span class="token comment">## Plugins: https://hexo.io/plugins/</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 关于根目录下<code>_config.yml</code> 文件的其它修改建议：</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="3-新建主题必备的页面"><a href="#3-新建主题必备的页面" class="headerlink" title="3. 新建主题必备的页面"></a>3. 新建主题必备的页面</h3><h4 id="3-1-标签-tags-页"><a href="#3-1-标签-tags-页" class="headerlink" title="3.1 标签 tags 页"></a>3.1 标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-09-24 15:35:29</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-分类-categories-页"><a href="#3-2-分类-categories-页" class="headerlink" title="3.2 分类 categories 页"></a>3.2 分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-09-24 15:36:04</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-新建关于我-about-页"><a href="#3-3-新建关于我-about-页" class="headerlink" title="3.3 新建关于我 about 页"></a>3.3 新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-09-24 15:36:26</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-新建留言板-contact-页（可选的）"><a href="#3-4-新建留言板-contact-页（可选的）" class="headerlink" title="3.4 新建留言板 contact 页（可选的）"></a>3.4 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-09-24 16:29:57</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="3-5-新建友情链接-friends-页（可选的）"><a href="#3-5-新建友情链接-friends-页（可选的）" class="headerlink" title="3.5 新建友情链接 friends 页（可选的）"></a>3.5 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-09-24 15:38:23</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-新建-404-页（与官网不同）"><a href="#3-6-新建-404-页（与官网不同）" class="headerlink" title="3.6 新建 404 页（与官网不同）"></a>3.6 新建 404 页（与官网不同）</h4><p>首先再站点根目录下的 source 文件夹下新建 404.md 文件，文件内容如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着在<code>hexo-theme-matery</code>主题文件夹的 layout 目录下新建 404.ejs 文件，添加内容如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* don't remove. */</span>    <span class="token selector">.about-cover</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 90.2vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        &lt;%= page.description %&gt;                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>返回首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Tips: 不要在本地试验，本地的时候输入错误的页面不会显示404页面的。</p></blockquote><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209252056600.png"></p><h3 id="4-添加各种插件"><a href="#4-添加各种插件" class="headerlink" title="4. 添加各种插件"></a>4. 添加各种插件</h3><h4 id="4-1-文章搜索功能（建议安装）"><a href="#4-1-文章搜索功能（建议安装）" class="headerlink" title="4.1 文章搜索功能（建议安装）"></a>4.1 文章搜索功能（建议安装）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209252110708.png"></p><h4 id="4-2-中文链接转拼音（建议安装）"><a href="#4-2-中文链接转拼音（建议安装）" class="headerlink" title="4.2 中文链接转拼音（建议安装）"></a>4.2 中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><p>第二种方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#算法选项：crc16丨crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec <span class="token comment">#输出进制：dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-文章字数统计插件（建议安装）"><a href="#4-3-文章字数统计插件（建议安装）" class="headerlink" title="4.3 文章字数统计插件（建议安装）"></a>4.3 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wordCount:  enable: <span class="token boolean">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  postWordCount: <span class="token boolean">true</span>  min2read: <span class="token boolean">true</span>  totalCount: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209252110245.png"></p><h4 id="4-4-添加emoji表情支持（可选）"><a href="#4-4-添加emoji表情支持（可选）" class="headerlink" title="4.4 添加emoji表情支持（可选）"></a>4.4 添加emoji表情支持（可选）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网站<a href="https://www.webfx.com/tools/emoji-cheat-sheet/%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E5%B8%B8%E7%94%A8%E8%A1%A8%E6%83%85%E5%AF%B9%E5%BA%94%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BE%8B%E5%A6%82%F0%9F%98%8D">https://www.webfx.com/tools/emoji-cheat-sheet/可以搜索常用表情对应代码，例如😍</a> </p><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="5-修改社交链接"><a href="#5-修改社交链接" class="headerlink" title="5. 修改社交链接"></a>5. 修改社交链接</h3><p>在<code>hexo-theme-matery</code>主题文件夹的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><h3 id="6-修改打赏的二维码图片"><a href="#6-修改打赏的二维码图片" class="headerlink" title="6. 修改打赏的二维码图片"></a>6. 修改打赏的二维码图片</h3><p>在<code>hexo-theme-matery</code>主题文件夹的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片，如果图片后缀不一样的话，需要到主题的<code>_config.yml</code>下面修改。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">reward</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 你的赏识是我前进的动力  <span class="token key atrule">wechat</span><span class="token punctuation">:</span> /medias/reward/wechat.jpg  <span class="token key atrule">alipay</span><span class="token punctuation">:</span> /medias/reward/alipay.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-配置音乐播放器（可选的）"><a href="#7-配置音乐播放器（可选的）" class="headerlink" title="7. 配置音乐播放器（可选的）"></a>7. 配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p>id获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的id</p><p>即为这串数字。</p></blockquote><h3 id="8-看板娘模块的安装和使用（可选）"><a href="#8-看板娘模块的安装和使用（可选）" class="headerlink" title="8. 看板娘模块的安装和使用（可选）"></a>8. 看板娘模块的安装和使用（可选）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载完成后，可以在node_modules文件夹中找到自己安装的插件。</p><p>然后下载你想要的看板娘模块（可以自己到网上找哪个合心意的），执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token punctuation">{</span>packagename<span class="token punctuation">}</span><span class="token comment"># 例如cnpm install live2d-widget-model-haru</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完成后，回到blog根目录下配置_config.yml，添加以下代码（model要根据自己情况设置）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>z16  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">400</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在右下角有看板娘啦！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">--depth</span> <span class="token number">0</span> <span class="token comment">#命令查看 npm 安装各 hexo 插件的情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="Article20220926\5.png"><h3 id="9-新建文章模板修改"><a href="#9-新建文章模板修改" class="headerlink" title="9. 新建文章模板修改"></a>9. 新建文章模板修改</h3><p>为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token key atrule">coverImg</span><span class="token punctuation">:</span> <span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">password</span><span class="token punctuation">:</span><span class="token key atrule">summary</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">Markdown 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 _config.yml 中的 author</td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left">featureImages 中的某个值</td><td align="left">文章特征图，推荐使用图床</td></tr><tr><td align="left">top</td><td align="left">true</td><td align="left">推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left">false</td><td align="left">v1.0.2 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left">v1.0.2 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td align="left">toc</td><td align="left">true</td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td align="left">mathjax</td><td align="left">false</td><td align="left">是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="left">reprintPolicy</td><td align="left">cc_by</td><td align="left">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p>注意:</p><ol><li><strong>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</strong></li><li>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><h3 id="10-修改网站相关信息"><a href="#10-修改网站相关信息" class="headerlink" title="10. 修改网站相关信息"></a>10. 修改网站相关信息</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#这是根目录下的配置文件信息</span><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span>     <span class="token comment">#网站标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token comment">#网站副标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span>     <span class="token comment">#网站描述description 主要用于5E0，告诉搜索引擎一个关于您站点的简单描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span>  <span class="token comment">#网站的关键词。使用半角逗号“，”分隔多个关键词</span><span class="token key atrule">author</span><span class="token punctuation">:</span>    <span class="token comment">#您的名字</span><span class="token key atrule">language</span><span class="token punctuation">:</span>  <span class="token comment">#网站使用的语言。建议修改为zh-CN</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span>  <span class="token comment">#网站时区。Hexo默认使用您电脑的时区。</span><span class="token comment"># 这是主题配置文件的相关信息</span><span class="token comment"># 配置网站favicon和网站LOGO</span><span class="token comment"># 此处我用的CDN，也可以使用本地文件</span><span class="token key atrule">favicon</span><span class="token punctuation">:</span> <span class="token key atrule">logo</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-代码高亮！！"><a href="#11-代码高亮！！" class="headerlink" title="11. 代码高亮！！"></a>11. 代码高亮！！</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><h4 id="11-1-卸载hexo-prism-plugin插件"><a href="#11-1-卸载hexo-prism-plugin插件" class="headerlink" title="11.1 卸载hexo-prism-plugin插件"></a>11.1 卸载hexo-prism-plugin插件</h4><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>{</code> 和 <code>}</code> 的转义字符。<strong>一定要卸载！！</strong></p><h4 id="11-2-禁用highlight，启用prismjs"><a href="#11-2-禁用highlight，启用prismjs" class="headerlink" title="11.2 禁用highlight，启用prismjs"></a>11.2 禁用highlight，启用prismjs</h4><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                      <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                 <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>               <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://hexo.io/zh-cn/docs/syntax-highlight#preprocess">注意事项</a></p><h4 id="11-3-自定义prismjs样式"><a href="#11-3-自定义prismjs样式" class="headerlink" title="11.3 自定义prismjs样式"></a>11.3 自定义prismjs样式</h4><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html#themes=prism-tomorrow&amp;languages=markup+css+clike+javascript+abap+abnf+actionscript+ada+agda+al+antlr4+apacheconf+apex+apl+applescript+aql+arduino+arff+armasm+arturo+asciidoc+aspnet+asm6502+asmatmel+autohotkey+autoit+avisynth+avro-idl+awk+bash+basic+batch+bbcode+bicep+birb+bison+bnf+brainfuck+brightscript+bro+bsl+c+csharp+cpp+cfscript+chaiscript+cil+clojure+cmake+cobol+coffeescript+concurnas+csp+cooklang+coq+crystal+css-extras+csv+cue+cypher+d+dart+dataweave+dax+dhall+diff+django+dns-zone-file+docker+dot+ebnf+editorconfig+eiffel+ejs+elixir+elm+etlua+erb+erlang+excel-formula+fsharp+factor+false+firestore-security-rules+flow+fortran+ftl+gml+gap+gcode+gdscript+gedcom+gettext+gherkin+git+glsl+gn+linker-script+go+go-module+gradle+graphql+groovy+haml+handlebars+haskell+haxe+hcl+hlsl+hoon+http+hpkp+hsts+ichigojam+icon+icu-message-format+idris+ignore+inform7+ini+io+j+java+javadoc+javadoclike+javastacktrace+jexl+jolie+jq+jsdoc+js-extras+json+json5+jsonp+jsstacktrace+js-templates+julia+keepalived+keyman+kotlin+kumir+kusto+latex+latte+less+lilypond+liquid+lisp+livescript+llvm+log+lolcode+lua+magma+makefile+markdown+markup-templating+mata+matlab+maxscript+mel+mermaid+mizar+mongodb+monkey+moonscript+n1ql+n4js+nand2tetris-hdl+naniscript+nasm+neon+nevod+nginx+nim+nix+nsis+objectivec+ocaml+odin+opencl+openqasm+oz+parigp+parser+pascal+pascaligo+psl+pcaxis+peoplecode+perl+php+phpdoc+php-extras+plant-uml+plsql+powerquery+powershell+processing+prolog+promql+properties+protobuf+pug+puppet+pure+purebasic+purescript+python+qsharp+q+qml+qore+r+racket+cshtml+jsx+tsx+reason+regex+rego+renpy+rescript+rest+rip+roboconf+robotframework+ruby+rust+sas+sass+scss+scala+scheme+shell-session+smali+smalltalk+smarty+sml+solidity+solution-file+soy+sparql+splunk-spl+sqf+sql+squirrel+stan+stata+iecst+stylus+supercollider+swift+systemd+t4-templating+t4-cs+t4-vb+tap+tcl+tt2+textile+toml+tremor+turtle+twig+typescript+typoscript+unrealscript+uorazor+uri+v+vala+vbnet+velocity+verilog+vhdl+vim+visual-basic+warpscript+wasm+web-idl+wgsl+wiki+wolfram+wren+xeora+xml-doc+xojo+xquery+yaml+yang+zig&amp;plugins=line-highlight+line-numbers+inline-color+command-line+diff-highlight+treeview">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>js</code>和<code>css</code> 文件，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。也可以直接从我的github的<code>libs/prism</code>里面下载，自带的和定制下载的都有点小问题。</p><p>然后修改<code>hexo-theme-matery</code> 主题文件夹中的 <code>_config.yml</code>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">libs</span><span class="token punctuation">:</span>  <span class="token key atrule">css</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>    <span class="token key atrule">prism</span><span class="token punctuation">:</span> /libs/prism/prism.css    <span class="token punctuation">...</span>  <span class="token key atrule">js</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>    <span class="token key atrule">prism</span><span class="token punctuation">:</span> /libs/prism/prism.js    <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-4-出现的问题"><a href="#11-4-出现的问题" class="headerlink" title="11.4 出现的问题"></a>11.4 出现的问题</h4><p>当面运行测试的时候会发现，代码前面没有行数，但有空格，这真的是折磨。</p><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209252148051.png"></p><p>这需要在<code>hexo-theme-matery</code>主题文件的 <code>source/css/matery.css</code> 文件中修改</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector"># 修改前pre</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 2rem 1rem 1rem 3rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"># 修改后pre</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 2rem 1rem 1rem 1rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209252149218.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Matery主题的安装和美化过程，当然还有很多功能等着大家探索，可以根据自己的喜好，安装各种插件。</p><p>谢谢大家!</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo入门</title>
      <link href="/2022/09/25/article20220925/"/>
      <url>/2022/09/25/article20220925/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接</p><p><a href="https://blog.17lai.site/">夜法之书的Hexo</a>  </p><p><a href="https://fulequn.github.io/2020/08/23/Article202008231/">Hexo一篇文章多个categories</a></p></blockquote><h2 id="hexo-目录结构说明"><a href="#hexo-目录结构说明" class="headerlink" title="hexo 目录结构说明"></a>hexo 目录结构说明</h2><p>在执行过<code>Hexo d</code>命令之后，目录结构新增了<code>.deploy_git</code>，<code>public</code>，<code>.gitignore</code>，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree <span class="token parameter variable">-L</span> <span class="token number">2</span><span class="token builtin class-name">.</span>├── .deploy_git├── node_modules├── public├── scaffolds│   ├── draft.md│   ├── page.md│   └── post.md├── <span class="token builtin class-name">source</span>│   ├── _posts│   ├── _drafts├── themes├── _config.yml├── db.json├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-config-yml"><a href="#1-config-yml" class="headerlink" title="1. _config.yml"></a>1. _config.yml</h3><p>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a> 文档。</p><h3 id="2-node-modules-和-package-json"><a href="#2-node-modules-和-package-json" class="headerlink" title="2. node_modules 和 package.json"></a>2. node_modules 和 package.json</h3><p>都是在初始化时自动创建。</p><ul><li><code>node_modules</code> 用来存储已安装的各类依赖包。</li><li><code>package.json</code> 用来查看 Hexo 的版本以及相关依赖包的版本。</li></ul><h3 id="3-scaffold"><a href="#3-scaffold" class="headerlink" title="3. scaffold"></a>3. scaffold</h3><p>模板文件夹，初始化时自动创建。包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。</p><h3 id="4-themes"><a href="#4-themes" class="headerlink" title="4. themes"></a>4. themes</h3><p>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。默认主题为 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>。</p><h3 id="5-source-，-public-和-deploy-git"><a href="#5-source-，-public-和-deploy-git" class="headerlink" title="5. source ， public 和 .deploy_git"></a>5. source ， public 和 .deploy_git</h3><ul><li>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</li><li>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</li><li>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git</p><ul><li>执行<code>hexo generate</code>，根据 source，更新 public。</li><li>执行<code>hexo deploy</code>，根据 public，更新 .deploy_git。</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="1-指令说明"><a href="#1-指令说明" class="headerlink" title="1. 指令说明"></a>1. 指令说明</h3><ul><li><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</li><li><code>hexo server -s</code> #以静态模式启动</li><li><code>hexo server -p 5000</code> #更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</li><li><code>hexo server -i IP地址</code> #自定义 IP</li><li><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</li><li><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将<code>/blog/source/</code> 下面的.md后缀的文件编译为.html 后缀的文件,存放在<code>/blog/public/</code> 路径下)</li><li><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</li><li><code>hexo init</code> 文件夹名称 #初始化 XX 文件夹名称</li><li><code>npm update hexo -g</code>#升级</li><li><code>npm install hexo -g</code> #安装</li><li><code>node -v</code> #查看 node.js 版本号</li><li><code>npm -v</code> #查看 npm 版本号</li><li><code>git --version</code> #查看 git 版本号</li><li><code>hexo -v</code> #查看 hexo 版本号</li><li><code>hexo new page “music”</code> #新增页面music</li><li><code>hexo new post “文章名称”</code> #新增文章</li></ul><h3 id="2-简写指令"><a href="#2-简写指令" class="headerlink" title="2. 简写指令"></a>2. 简写指令</h3><ul><li><code>hexo n "我的第一篇文章"</code> 等价于 <code>hexo new "我的第一篇文章"</code> 还等价于 <code>hexo new post "我的第一篇文章"</code></li><li><code>hexo p</code> 等价于 <code>hexo publish</code></li><li><code>hexo g</code> 等价于 <code>hexo generate</code></li><li><code>hexo s</code>等价于 <code>hexo server</code></li><li><code>hexo d</code> 等价于 <code>hexo deploy</code></li><li><code>hexo g -d</code>等价于<code>hexo generate --deploy</code></li></ul><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h2 id="tags与categories"><a href="#tags与categories" class="headerlink" title="tags与categories"></a>tags与categories</h2><p>在博客或网站中，<code>Tags</code> 和 <code>Categories</code> 通常用来对文章进行分类和归档，以便读者可以更方便地查找和浏览相关主题的文章。</p><ul><li><p>Tags（标签）是指对文章进行的主题或关键词的描述，通常是一些具有代表性或关键性的单词或短语，可以用来标记一篇或多篇文章，使得读者可以方便地查找到相关主题的文章。</p></li><li><p>Categories（分类）是指对文章进行的归档或分类的描述，通常是一些具有代表性或普遍性的主题或类别，可以用来将一篇或多篇文章进行归类和整理，以便读者可以更方便地浏览和查找相关主题的文章。</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">-</span> Hexo<span class="token punctuation">-</span> Markdown<span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 技术<span class="token punctuation">-</span> 编程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建和使用</title>
      <link href="/2022/09/24/article20220924/"/>
      <url>/2022/09/24/article20220924/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接</p><p><a href="https://hexo.io/zh-cn/index.html">Hexo 官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/547520780">2022 Hexo 博客搭建和使用教程(Windows)</a></p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?share_source=copy_web&amp;vd_source=d698f3adeb829e7ec38eaffd67915950">手把手教你从0开始搭建自己的个人博客|bilibili</a></p></blockquote><h2 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍:"></a>Hexo 介绍:</h2><blockquote><p>Hexo 是一个基于 Node.js 的静态博客框架，可以帮助用户快速搭建并部署静态博客网站。与其他静态博客框架相比，Hexo 具有速度快、使用方便等优点，同时具备丰富的插件和主题支持，可以满足不同用户的需求。</p><p>Hexo 的工作原理是将用户编写的 Markdown 文件转换为 HTML 文件，使用 <a href="https://link.zhihu.com/?target=http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，然后生成静态网站。用户可以通过 Hexo 提供的命令行工具来管理博客的内容和布局，同时支持多种第三方扩展，比如部署到 GitHub Pages 和其他云服务等。</p><p>Hexo 的安装和使用非常简单，只需要在本地安装 Node.js 和 Git 等基本工具，然后使用命令行安装 Hexo，就可以开始编写和发布博客了。由于 Hexo 是一个开源项目，用户可以通过 GitHub 等平台获取最新的版本和插件，并与全球的开发者社区交流和分享。</p></blockquote><h2 id="第一章-前期准备"><a href="#第一章-前期准备" class="headerlink" title="第一章 前期准备"></a>第一章 前期准备</h2><h3 id="1-1-安装前所需环境介绍"><a href="#1-1-安装前所需环境介绍" class="headerlink" title="1.1 安装前所需环境介绍"></a>1.1 安装前所需环境介绍</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> </li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果电脑已经具备所需工具，那么可以直接进入第二章开始安装 Hexo 了。</p><p>如果还未安装这两款工具，那么请按照以下步骤进行安装。</p><h3 id="1-2-安装-Git"><a href="#1-2-安装-Git" class="headerlink" title="1.2 安装 Git"></a>1.2 安装 Git</h3><blockquote><p>Git是一个分布式版本控制系统，最初由Linus Torvalds于2005年开发，旨在管理Linux内核的源代码。它可以在不同的计算机上并行地开发代码，并可以跟踪代码的版本历史记录，以便在需要时进行回滚或比较不同版本之间的差异。</p></blockquote><ul><li><p>官方下载地址: <a href="http://git-scm.com/">Git - Downloading Package</a></p></li><li><p>安装与Github配置使用: <a href="https://github.com/jijunhao/git-skills">Git操作手册</a></p></li></ul><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209251035608.png"></p><ul><li><p>注意事项: 建议选择 64-bit Git for Windows Setup，并且安装时要勾选 <strong>Add to PATH</strong> 选项</p></li><li><p>安装后验证: 在 cmd 中输入命令 <code>git --version</code>, 查看 Git 版本</p></li></ul><h3 id="1-3-安装-Node-js"><a href="#1-3-安装-Node-js" class="headerlink" title="1.3 安装 Node.js"></a>1.3 安装 Node.js</h3><blockquote><p>Node.js是一个基于Chrome V8 JavaScript引擎构建的开源、跨平台的运行时环境，可以让JavaScript代码在服务器端运行，具有事件驱动、非阻塞I/O等特点。它的出现使得JavaScript不仅可以在浏览器中作为脚本语言运行，还可以在服务器端处理数据、构建网络应用、开发命令行工具等。</p></blockquote><ul><li>官方下载地址: <a href="http://nodejs.org/">Node.js</a> </li><li>安装与使用: <a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">菜鸟教程</a></li></ul><p><img src="https://blog-1314109265.cos.ap-nanjing.myqcloud.com/202209251035160.png"></p><ul><li><p>注意事项: 使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></li><li><p>安装后验证: 在 cmd 中输入命令 <code>node -v</code>, 查看 Node 版本</p></li></ul><h2 id="第二章-安装-Hexo"><a href="#第二章-安装-Hexo" class="headerlink" title="第二章 安装 Hexo"></a>第二章 安装 Hexo</h2><h3 id="2-1-安装-cnpm"><a href="#2-1-安装-cnpm" class="headerlink" title="2.1 安装 cnpm"></a>2.1 安装 cnpm</h3><p>直接用 npm 速度会比较慢（源在国外），因此要利用 npm 安装 cnpm 或者使用 clash 等软件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装淘宝的cnpm管理器</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npm.taobao.org <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数说明: </p><p><code>-g</code> 表示安装到全局环境中</p><p><code>--registry=https://registry.npm.taobao.org</code> 表示使用淘宝镜像安装 cnpm</p><h3 id="2-2-安装-Hexo"><a href="#2-2-安装-Hexo" class="headerlink" title="2.2 安装 Hexo"></a>2.2 安装 Hexo</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h3><p>建议永远安装最新版本的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/index.html#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th>Hexo 版本</th><th>最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td>6.0+</td><td>12.13.0</td></tr><tr><td>5.0+</td><td>10.13.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td></tr><tr><td>4.0</td><td>8.6</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td></tr></tbody></table><h3 id="2-4-Hexo常用命令"><a href="#2-4-Hexo常用命令" class="headerlink" title="2.4 Hexo常用命令"></a>2.4 Hexo常用命令</h3><p><code>hexo clean</code> 清除缓存文件和已生成的静态文件 public</p><p><code>hexo n [name]</code>生成文章，即在 source 文件夹下的 _posts 文件夹下创建 .md 文件</p><p><code>hexo g</code> 在 public 文件夹下生成相关的 html 文件</p><p><code>hexo s</code> 可以开启本地预览服务，打开浏览器访问 <a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000</a> 即可看到博客内容</p><p><code>hexo d</code> 将博客部署到远程服务器上</p><h2 id="第三章-使用-Hexo-搭建博客并部署到-GitHub-Pages-上"><a href="#第三章-使用-Hexo-搭建博客并部署到-GitHub-Pages-上" class="headerlink" title="第三章 使用 Hexo 搭建博客并部署到 GitHub Pages 上"></a>第三章 使用 Hexo 搭建博客并部署到 GitHub Pages 上</h2><h3 id="3-1-在-Github-上创建仓库"><a href="#3-1-在-Github-上创建仓库" class="headerlink" title="3.1 在 Github 上创建仓库"></a>3.1 在 Github 上创建仓库</h3><p>在 GitHub 上创建一个新的仓库。您可以在 GitHub 上创建一个新的仓库，仓库名称应该为 <code>&lt;username&gt;.github.io</code>。其中，<code>&lt;username&gt;</code>是您的 GitHub 用户名。</p><blockquote><p>注意配置 git 和 ssh 免密登录</p><p><a href="https://github.com/jijunhao/git-skills/blob/main/02%E9%85%8D%E7%BD%AEGit.md">配置git</a>    <a href="https://github.com/jijunhao/git-skills/blob/main/%E9%99%84%E5%BD%95B-SSH%E5%AF%86%E5%8C%99.md">配置ssh密钥</a></p></blockquote><h3 id="3-2-初始化博客文件夹"><a href="#3-2-初始化博客文件夹" class="headerlink" title="3.2 初始化博客文件夹"></a>3.2 初始化博客文件夹</h3><p>创建一个空文件夹(名字可以随便取)，这将会是静态网页的本地存储位置。</p><p>打开文件夹，在此文件夹下运行git bash（右键单击空白处）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-安装-hexo-deployer-git-插件"><a href="#3-3-安装-hexo-deployer-git-插件" class="headerlink" title="3.3 安装 hexo-deployer-git 插件"></a>3.3 安装 hexo-deployer-git 插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将安装Hexo的Git部署插件，用于将博客发布到GitHub Pages。</p><h3 id="3-4-配置博客的-Git-信息"><a href="#3-4-配置博客的-Git-信息" class="headerlink" title="3.4 配置博客的 Git 信息"></a>3.4 配置博客的 Git 信息</h3><p>打开文件夹下的<code>_config.yml</code>文件，这个文件是用来配置你的博客的。其中，<code>&lt;git-repository-url&gt;</code> 是您在第一步中创建的GitHub仓库的URL地址。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> &lt;git<span class="token punctuation">-</span>repository<span class="token punctuation">-</span>url<span class="token punctuation">&gt;</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main  <span class="token comment"># 注意 &lt;git-repository-url&gt;有两种形式 就是网页商code里面的url下载连接</span><span class="token comment">## https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><span class="token comment">## git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><span class="token comment"># 分支也有讲究，一般是main或者master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-生成并部署博客"><a href="#3-5-生成并部署博客" class="headerlink" title="3.5 生成并部署博客"></a>3.5 生成并部署博客</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个命令将会生成 Hexo 博客的静态 HTML 文件，并将其部署到 GitHub Pages 上。</p><h2 id="第五章-使用-Typora-编写博客"><a href="#第五章-使用-Typora-编写博客" class="headerlink" title="第五章 使用 Typora 编写博客"></a>第五章 使用 Typora 编写博客</h2><blockquote><p>Typora 是一款轻便简洁的 Markdown 编辑器，支持即时渲染技术，这也是与其他 Markdown 编辑器最显著的区别。即时渲染使得你写Markdown 就像是写 Word 文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p></blockquote><p>优点:</p><ul><li><strong>简洁美观</strong>：Typora提供了干净简洁的界面和优雅的设计，使得用户在使用过程中能够感受到愉悦和舒适。</li><li><strong>实时预览</strong>：Typora在编辑器和预览窗口之间实现了实时同步，您所写的Markdown代码会即时转化为预览效果，这使得您可以随时看到所写内容的样子，让您可以专注于写作而不用关注排版。</li><li><strong>扩展语法</strong>：Typora内置了语法高亮功能，支持多种编程语言的语法高亮，让代码更加易读。</li><li><strong>跨平台</strong>：Typora提供了Windows、Mac和Linux等多个平台的版本，可以满足用户在不同平台上的需求。</li><li><strong>支持导出多种格式</strong>：Typora支持导出多种格式，包括HTML、PDF、Markdown和Word等格式，可以让用户方便地将Markdown格式的文档导出为其他常见格式的文档。</li></ul><p>总之，Typora是一款非常实用和易用的Markdown编辑器，适合喜欢使用Markdown进行写作和编辑的用户，无论是写技术文档、写博客、写笔记还是写小说等等，Typora都是一个非常好的选择。</p><p>官网: <a href="https://typoraio.cn/">Typora 官方中文站</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是Hexo搭建一个简单的博客的过程。</p><p>欢迎大家访问我的博客地址: <a href="https://jijunhao.github.io/">https://jijunhao.github.io/</a></p><p>谢谢大家!</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/24/hello-world/"/>
      <url>/2022/09/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
